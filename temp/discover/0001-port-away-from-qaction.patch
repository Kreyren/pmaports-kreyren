From 4bf3f59adb82e2ef38df98073ee39e6d20e56921 Mon Sep 17 00:00:00 2001
From: Aleix Pol <aleixpol@kde.org>
Date: Fri, 5 Feb 2021 20:13:03 +0100
Subject: [PATCH] Port away from QAction

It's big part of the reason why we use QtWidgets and it seems to add
some unnecessary overhead.
---
 discover/DiscoverDeclarativePlugin.cpp        |  4 +-
 exporter/main.cpp                             |  4 +-
 libdiscover/ActionsModel.cpp                  | 80 -------------------
 libdiscover/ActionsModel.h                    | 46 -----------
 libdiscover/CMakeLists.txt                    |  4 +-
 .../backends/DummyBackend/DummyBackend.cpp    |  1 -
 .../DummyBackend/DummySourcesBackend.cpp      |  6 +-
 .../DummyBackend/DummySourcesBackend.h        |  4 +-
 .../backends/DummyBackend/tests/DummyTest.cpp |  1 -
 .../DummyBackend/tests/UpdateDummyTest.cpp    |  1 -
 .../FlatpakBackend/FlatpakBackend.cpp         |  1 -
 .../FlatpakBackend/FlatpakSourcesBackend.cpp  |  8 +-
 .../FlatpakBackend/FlatpakSourcesBackend.h    |  3 +-
 .../FlatpakBackend/tests/FlatpakTest.cpp      |  4 +-
 .../backends/FwupdBackend/FwupdBackend.h      |  3 +-
 .../FwupdBackend/FwupdSourcesBackend.cpp      |  2 -
 .../PackageKitBackend/PackageKitBackend.cpp   |  1 -
 .../PackageKitSourcesBackend.cpp              |  8 +-
 .../PackageKitBackend/PackageKitUpdater.cpp   |  1 -
 .../backends/SnapBackend/CMakeLists.txt       |  2 +-
 .../backends/SnapBackend/SnapBackend.cpp      |  1 -
 .../resources/AbstractSourcesBackend.h        |  3 +-
 libdiscover/resources/DiscoverAction.cpp      | 75 +++++++++++++++++
 libdiscover/resources/DiscoverAction.h        | 59 ++++++++++++++
 libdiscover/resources/ResourcesModel.cpp      |  8 +-
 libdiscover/resources/ResourcesModel.h        |  8 +-
 .../resources/ResourcesUpdatesModel.cpp       |  2 +-
 libdiscover/resources/SourcesModel.cpp        |  1 -
 update/main.cpp                               |  4 +-
 29 files changed, 172 insertions(+), 173 deletions(-)
 delete mode 100644 libdiscover/ActionsModel.cpp
 delete mode 100644 libdiscover/ActionsModel.h
 create mode 100644 libdiscover/resources/DiscoverAction.cpp
 create mode 100644 libdiscover/resources/DiscoverAction.h

diff --git a/discover/DiscoverDeclarativePlugin.cpp b/discover/DiscoverDeclarativePlugin.cpp
index 0f754258..525a000e 100644
--- a/discover/DiscoverDeclarativePlugin.cpp
+++ b/discover/DiscoverDeclarativePlugin.cpp
@@ -11,6 +11,7 @@
 #include <Transaction/TransactionListener.h>
 #include <Transaction/TransactionModel.h>
 #include <Transaction/Transaction.h>
+#include <resources/DiscoverAction.h>
 #include <resources/ResourcesUpdatesModel.h>
 #include <resources/AbstractResource.h>
 #include <resources/ResourcesModel.h>
@@ -24,7 +25,6 @@
 #include <UpdateModel/UpdateModel.h>
 #include <ScreenshotsModel.h>
 #include <ApplicationAddonsModel.h>
-#include <ActionsModel.h>
 #include <qqml.h>
 #include <QQmlEngine>
 #include <QQmlContext>
@@ -48,10 +48,10 @@ void DiscoverDeclarativePlugin::registerTypes(const char* /*uri*/)
     qmlRegisterType<ReviewsModel>("org.kde.discover", 2, 0, "ReviewsModel");
     qmlRegisterType<ApplicationAddonsModel>("org.kde.discover", 2, 0, "ApplicationAddonsModel");
     qmlRegisterType<ScreenshotsModel>("org.kde.discover", 2, 0, "ScreenshotsModel");
-    qmlRegisterType<ActionsModel>("org.kde.discover", 2, 0, "ActionsModel");
     qmlRegisterType<UpdateModel>("org.kde.discover", 2, 0, "UpdateModel");
     qmlRegisterType<ReadFile>("org.kde.discover", 2, 0, "ReadFile");
 
+    qmlRegisterUncreatableType<DiscoverAction>("org.kde.discover", 2, 0, "DiscoverAction", QStringLiteral("Use QQC Action"));
     qmlRegisterUncreatableType<QAction>("org.kde.discover", 2, 0, "QAction", QStringLiteral("Use QQC Action"));
     qmlRegisterUncreatableType<AbstractResource>("org.kde.discover", 2, 0, "AbstractResource", QStringLiteral("should come from the ResourcesModel"));
     qmlRegisterUncreatableType<AbstractSourcesBackend>("org.kde.discover", 2, 0, "AbstractSourcesBackend", QStringLiteral("should come from the SourcesModel"));
diff --git a/exporter/main.cpp b/exporter/main.cpp
index 565d5b91..b4307956 100644
--- a/exporter/main.cpp
+++ b/exporter/main.cpp
@@ -4,7 +4,7 @@
  *   SPDX-License-Identifier: LGPL-2.0-or-later
  */
 
-#include <QApplication>
+#include <QGuiApplication>
 #include <QCommandLineParser>
 #include <KLocalizedString>
 #include <KAboutData>
@@ -40,7 +40,7 @@ int main(int argc, char** argv)
         exp.setExportPath(QUrl::fromUserInput(parser.positionalArguments().at(0), QString(), QUrl::AssumeLocalFile));
     }
 
-    QObject::connect(&exp, &MuonExporter::exportDone, &app, &QApplication::quit);
+    QObject::connect(&exp, &MuonExporter::exportDone, &app, &QCoreApplication::quit);
 
     return app.exec();
 }
diff --git a/libdiscover/ActionsModel.cpp b/libdiscover/ActionsModel.cpp
deleted file mode 100644
index 832a311a..00000000
--- a/libdiscover/ActionsModel.cpp
+++ /dev/null
@@ -1,80 +0,0 @@
-/*
- *   SPDX-FileCopyrightText: 2014 Aleix Pol Gonzalez <aleixpol@blue-systems.com>
- *
- *   SPDX-License-Identifier: GPL-2.0-only OR GPL-3.0-only OR LicenseRef-KDE-Accepted-GPL
- */
-
-#include "ActionsModel.h"
-#include "resources/ResourcesModel.h"
-#include "utils.h"
-#include <QAction>
-#include "libdiscover_debug.h"
-
-ActionsModel::ActionsModel(QObject* parent)
-    : QAbstractListModel(parent)
-    , m_priority(-1)
-{
-    connect(ResourcesModel::global(), &ResourcesModel::backendsChanged, this, &ActionsModel::reload);
-}
-
-QHash< int, QByteArray > ActionsModel::roleNames() const
-{
-    return { { Qt::UserRole, "action" }};
-}
-
-QVariant ActionsModel::data(const QModelIndex& index, int role) const
-{
-    if(!index.isValid() || role!=Qt::UserRole)
-        return QVariant();
-    return QVariant::fromValue<QObject*>(m_filteredActions[index.row()]);
-}
-
-int ActionsModel::rowCount(const QModelIndex& parent) const
-{
-    return parent.isValid() ? 0 : m_filteredActions.count();
-}
-
-void ActionsModel::setActions(const QVariant& actions)
-{
-    if (m_actions == actions) {
-        return;
-    }
-    m_actions = actions;
-
-    reload();
-    Q_EMIT actionsChanged(m_actions);
-}
-
-void ActionsModel::reload()
-{
-    QList<QAction*> actions = m_actions.value<QList<QAction*>>();
-    if (m_priority>=0) {
-        actions = kFilter<QList<QAction*>>(actions, [this](QAction* action){ return action->priority() == m_priority; });
-    }
-    actions = kFilter<QList<QAction*>>(actions, [](QAction* action){ return action->isVisible(); });
-    if (actions == m_filteredActions)
-        return;
-
-
-    beginResetModel();
-    m_filteredActions = actions;
-    endResetModel();
-
-    for(auto a : qAsConst(m_filteredActions)) {
-        connect(a, &QAction::changed, this, &ActionsModel::reload, Qt::UniqueConnection);
-    }
-}
-
-int ActionsModel::filterPriority() const
-{
-    return m_priority;
-}
-
-void ActionsModel::setFilterPriority(int p)
-{
-    if (m_priority != p) {
-        m_priority = p;
-        reload();
-        Q_EMIT filterPriorityChanged();
-    }
-}
diff --git a/libdiscover/ActionsModel.h b/libdiscover/ActionsModel.h
deleted file mode 100644
index 3e5b449e..00000000
--- a/libdiscover/ActionsModel.h
+++ /dev/null
@@ -1,46 +0,0 @@
-/*
- *   SPDX-FileCopyrightText: 2014 Aleix Pol Gonzalez <aleixpol@blue-systems.com>
- *
- *   SPDX-License-Identifier: GPL-2.0-only OR GPL-3.0-only OR LicenseRef-KDE-Accepted-GPL
- */
-
-#ifndef ACTIONSMODEL_H
-#define ACTIONSMODEL_H
-
-#include <QAbstractListModel>
-#include <QQmlParserStatus>
-#include "discovercommon_export.h"
-
-class QAction;
-
-class DISCOVERCOMMON_EXPORT ActionsModel : public QAbstractListModel
-{
-    Q_OBJECT
-    Q_PROPERTY(QVariant actions READ actions WRITE setActions NOTIFY actionsChanged)
-    Q_PROPERTY(int filterPriority READ filterPriority WRITE setFilterPriority NOTIFY filterPriorityChanged)
-    public:
-        explicit ActionsModel(QObject* parent = nullptr);
-
-        QHash<int, QByteArray> roleNames() const override;
-        QVariant data(const QModelIndex& index, int role) const override;
-        int rowCount(const QModelIndex& parent = QModelIndex()) const override;
-
-        void setFilterPriority(int p);
-        int filterPriority() const;
-
-        void setActions(const QVariant& actions);
-        QVariant actions() const { return m_actions; }
-
-    Q_SIGNALS:
-        void actionsChanged(const QVariant& actions);
-        void filterPriorityChanged();
-
-    private:
-        void reload();
-
-        QVariant m_actions;
-        QList<QAction*> m_filteredActions;
-        int m_priority;
-};
-
-#endif
diff --git a/libdiscover/CMakeLists.txt b/libdiscover/CMakeLists.txt
index 1097ea84..b1c62366 100644
--- a/libdiscover/CMakeLists.txt
+++ b/libdiscover/CMakeLists.txt
@@ -20,6 +20,7 @@ set(discovercommon_SRCS
     Transaction/TransactionModel.cpp
     UpdateModel/UpdateItem.cpp
     UpdateModel/UpdateModel.cpp
+    resources/DiscoverAction.cpp
     resources/ResourcesModel.cpp
     resources/ResourcesProxyModel.cpp
     resources/PackageState.cpp
@@ -31,7 +32,6 @@ set(discovercommon_SRCS
     resources/AbstractBackendUpdater.cpp
     resources/AbstractSourcesBackend.cpp
     resources/StoredResultsStream.cpp
-    ActionsModel.cpp
     DiscoverBackendsFactory.cpp
     ScreenshotsModel.cpp
     ApplicationAddonsModel.cpp
@@ -66,7 +66,7 @@ target_link_libraries(DiscoverCommon
 PUBLIC
     Qt5::Core
     Qt5::Qml
-    Qt5::Widgets
+    Qt5::Gui
     KF5::I18n
     KF5::ItemModels
 PRIVATE
diff --git a/libdiscover/backends/DummyBackend/DummyBackend.cpp b/libdiscover/backends/DummyBackend/DummyBackend.cpp
index 0ac8c805..6bca925c 100644
--- a/libdiscover/backends/DummyBackend/DummyBackend.cpp
+++ b/libdiscover/backends/DummyBackend/DummyBackend.cpp
@@ -21,7 +21,6 @@
 #include <QDebug>
 #include <QThread>
 #include <QTimer>
-#include <QAction>
 
 DISCOVER_BACKEND_PLUGIN(DummyBackend)
 
diff --git a/libdiscover/backends/DummyBackend/DummySourcesBackend.cpp b/libdiscover/backends/DummyBackend/DummySourcesBackend.cpp
index e5f3109e..955ea815 100644
--- a/libdiscover/backends/DummyBackend/DummySourcesBackend.cpp
+++ b/libdiscover/backends/DummyBackend/DummySourcesBackend.cpp
@@ -6,17 +6,17 @@
 
 #include "DummySourcesBackend.h"
 #include <QDebug>
-#include <QAction>
+#include "resources/DiscoverAction.h"
 
 DummySourcesBackend::DummySourcesBackend(AbstractResourcesBackend * parent)
     : AbstractSourcesBackend(parent)
     , m_sources(new QStandardItemModel(this))
-    , m_testAction(new QAction(QIcon::fromTheme(QStringLiteral("kalgebra")), QStringLiteral("DummyAction"), this))
+    , m_testAction(new DiscoverAction(QIcon::fromTheme(QStringLiteral("kalgebra")), QStringLiteral("DummyAction"), this))
 {
     for (int i = 0; i<10; ++i)
         addSource(QStringLiteral("DummySource%1").arg(i));
 
-    connect(m_testAction, &QAction::triggered, [](){ qDebug() << "action triggered!"; });
+    connect(m_testAction, &DiscoverAction::triggered, [](){ qDebug() << "action triggered!"; });
     connect(m_sources, &QStandardItemModel::itemChanged, this, [](QStandardItem* item) { qDebug() << "DummySource changed" << item << item->checkState(); });
 }
 
diff --git a/libdiscover/backends/DummyBackend/DummySourcesBackend.h b/libdiscover/backends/DummyBackend/DummySourcesBackend.h
index 3b7e874b..00280cea 100644
--- a/libdiscover/backends/DummyBackend/DummySourcesBackend.h
+++ b/libdiscover/backends/DummyBackend/DummySourcesBackend.h
@@ -10,6 +10,8 @@
 #include <resources/AbstractSourcesBackend.h>
 #include <QStandardItemModel>
 
+class DiscoverAction;
+
 class DummySourcesBackend : public AbstractSourcesBackend
 {
 public:
@@ -29,7 +31,7 @@ private:
     QStandardItem* sourceForId(const QString& id) const;
 
     QStandardItemModel* m_sources;
-    QAction* m_testAction;
+    DiscoverAction* m_testAction;
 };
 
 #endif // DUMMYSOURCESBACKEND_H
diff --git a/libdiscover/backends/DummyBackend/tests/DummyTest.cpp b/libdiscover/backends/DummyBackend/tests/DummyTest.cpp
index 3f4ce17b..00c4d678 100644
--- a/libdiscover/backends/DummyBackend/tests/DummyTest.cpp
+++ b/libdiscover/backends/DummyBackend/tests/DummyTest.cpp
@@ -20,7 +20,6 @@
 #include <QTest>
 
 #include <QtTest>
-#include <QAction>
 
 QTEST_MAIN(DummyTest)
 
diff --git a/libdiscover/backends/DummyBackend/tests/UpdateDummyTest.cpp b/libdiscover/backends/DummyBackend/tests/UpdateDummyTest.cpp
index 9e370306..207c0915 100644
--- a/libdiscover/backends/DummyBackend/tests/UpdateDummyTest.cpp
+++ b/libdiscover/backends/DummyBackend/tests/UpdateDummyTest.cpp
@@ -18,7 +18,6 @@
 
 #include <QTest>
 #include <QtTest>
-#include <QAction>
 
 class UpdateDummyTest
     : public QObject
diff --git a/libdiscover/backends/FlatpakBackend/FlatpakBackend.cpp b/libdiscover/backends/FlatpakBackend/FlatpakBackend.cpp
index c1e07efa..2ea37db9 100644
--- a/libdiscover/backends/FlatpakBackend/FlatpakBackend.cpp
+++ b/libdiscover/backends/FlatpakBackend/FlatpakBackend.cpp
@@ -28,7 +28,6 @@
 #include <KConfigGroup>
 #include <KSharedConfig>
 
-#include <QAction>
 #include <QtConcurrentRun>
 #include <QDebug>
 #include <QDir>
diff --git a/libdiscover/backends/FlatpakBackend/FlatpakSourcesBackend.cpp b/libdiscover/backends/FlatpakBackend/FlatpakSourcesBackend.cpp
index c66c74ae..c3ee3482 100644
--- a/libdiscover/backends/FlatpakBackend/FlatpakSourcesBackend.cpp
+++ b/libdiscover/backends/FlatpakBackend/FlatpakSourcesBackend.cpp
@@ -15,11 +15,11 @@
 #include <QDebug>
 #include <QNetworkAccessManager>
 #include <QNetworkReply>
-#include <QAction>
 
 #include <glib.h>
 #include <QTemporaryFile>
 #include <QStandardPaths>
+#include <resources/DiscoverAction.h>
 #include <resources/StoredResultsStream.h>
 
 class FlatpakSourceItem : public QStandardItem
@@ -37,12 +37,12 @@ FlatpakSourcesBackend::FlatpakSourcesBackend(const QVector<FlatpakInstallation *
     : AbstractSourcesBackend(parent)
     , m_preferredInstallation(installations.constFirst())
     , m_sources(new QStandardItemModel(this))
-    , m_flathubAction(new QAction(i18n("Add Flathub"), this))
+    , m_flathubAction(new DiscoverAction(i18n("Add Flathub"), this))
     , m_noSourcesItem(new QStandardItem(QStringLiteral("-")))
 {
     m_flathubAction->setObjectName(QStringLiteral("flathub"));
     m_flathubAction->setToolTip(i18n("Makes it possible to easily install the applications listed in https://flathub.org"));
-    connect(m_flathubAction, &QAction::triggered, this, [this](){
+    connect(m_flathubAction, &DiscoverAction::triggered, this, [this](){
         addSource(QStringLiteral("https://flathub.org/repo/flathub.flatpakrepo"));
     });
     for (auto installation : installations) {
@@ -302,7 +302,7 @@ void FlatpakSourcesBackend::addRemote(FlatpakRemote *remote, FlatpakInstallation
 
     const auto theActions = actions();
     for(const QVariant& act: theActions) {
-        QAction* action = qobject_cast<QAction*>(act.value<QObject*>());
+        DiscoverAction* action = qobject_cast<DiscoverAction*>(act.value<QObject*>());
         if (action->objectName() == id) {
             action->setEnabled(false);
             action->setVisible(false);
diff --git a/libdiscover/backends/FlatpakBackend/FlatpakSourcesBackend.h b/libdiscover/backends/FlatpakBackend/FlatpakSourcesBackend.h
index b2a6c7c2..08cb9e37 100644
--- a/libdiscover/backends/FlatpakBackend/FlatpakSourcesBackend.h
+++ b/libdiscover/backends/FlatpakBackend/FlatpakSourcesBackend.h
@@ -17,6 +17,7 @@ extern "C" {
 #include <flatpak.h>
 }
 
+class DiscoverAction;
 class FlatpakResource;
 class FlatpakSourcesBackend : public AbstractSourcesBackend
 {
@@ -52,7 +53,7 @@ private:
 
     FlatpakInstallation *m_preferredInstallation;
     QStandardItemModel* m_sources;
-    QAction* const m_flathubAction;
+    DiscoverAction* const m_flathubAction;
     QStandardItem* m_noSourcesItem;
     QStack<std::function<void()>> m_proceedFunctions;
 };
diff --git a/libdiscover/backends/FlatpakBackend/tests/FlatpakTest.cpp b/libdiscover/backends/FlatpakBackend/tests/FlatpakTest.cpp
index 810b2af4..627bb602 100644
--- a/libdiscover/backends/FlatpakBackend/tests/FlatpakTest.cpp
+++ b/libdiscover/backends/FlatpakBackend/tests/FlatpakTest.cpp
@@ -8,6 +8,7 @@
 #include <resources/ResourcesProxyModel.h>
 #include <resources/AbstractBackendUpdater.h>
 #include <resources/SourcesModel.h>
+#include <resources/DiscoverAction.h>
 #include <ApplicationAddonsModel.h>
 #include <ReviewsBackend/ReviewsModel.h>
 #include <Transaction/TransactionModel.h>
@@ -15,7 +16,6 @@
 
 #include <QTest>
 #include <QtTest>
-#include <QAction>
 
 class FlatpakTest
     : public QObject
@@ -64,7 +64,7 @@ private Q_SLOTS:
         QSignalSpy initializedSpy(m_appBackend, SIGNAL(initialized()));
         if (m->rowCount() == 1) {
             QSignalSpy spy(m, &SourcesModel::rowsInserted);
-            qobject_cast<QAction*>(bk->actions().constFirst().value<QObject*>())->trigger();
+            qobject_cast<DiscoverAction*>(bk->actions().constFirst().value<QObject*>())->trigger();
             QVERIFY(spy.count() || spy.wait(20000));
         }
         QVERIFY(initializedSpy.count() || initializedSpy.wait(20000));
diff --git a/libdiscover/backends/FwupdBackend/FwupdBackend.h b/libdiscover/backends/FwupdBackend/FwupdBackend.h
index c886384e..b0b11ea7 100644
--- a/libdiscover/backends/FwupdBackend/FwupdBackend.h
+++ b/libdiscover/backends/FwupdBackend/FwupdBackend.h
@@ -14,7 +14,6 @@
 #include <QDir>
 #include <QDebug>
 #include <QTimer>
-#include <QAction>
 #include <QMimeDatabase>
 #include <QVariantList>
 #include <QSet>
@@ -30,7 +29,7 @@ extern "C" {
 }
 #include <glib-2.0/glib-object.h>
 
-class QAction;
+class DiscoverAction;
 class StandardBackendUpdater;
 class FwupdResource;
 class FwupdBackend : public AbstractResourcesBackend
diff --git a/libdiscover/backends/FwupdBackend/FwupdSourcesBackend.cpp b/libdiscover/backends/FwupdBackend/FwupdSourcesBackend.cpp
index acf941eb..426781bf 100644
--- a/libdiscover/backends/FwupdBackend/FwupdSourcesBackend.cpp
+++ b/libdiscover/backends/FwupdBackend/FwupdSourcesBackend.cpp
@@ -7,11 +7,9 @@
 
 #include "FwupdSourcesBackend.h"
 
-#include <QAction>
 #include <QString>
 #include <KLocalizedString>
 
-
 class FwupdSourcesModel : public QStandardItemModel
 {
 Q_OBJECT
diff --git a/libdiscover/backends/PackageKitBackend/PackageKitBackend.cpp b/libdiscover/backends/PackageKitBackend/PackageKitBackend.cpp
index af75f7e2..8b44619d 100644
--- a/libdiscover/backends/PackageKitBackend/PackageKitBackend.cpp
+++ b/libdiscover/backends/PackageKitBackend/PackageKitBackend.cpp
@@ -24,7 +24,6 @@
 #include <QDebug>
 #include <QStandardPaths>
 #include <QFile>
-#include <QAction>
 #include <QMimeDatabase>
 #include <QFileSystemWatcher>
 #include <QFutureWatcher>
diff --git a/libdiscover/backends/PackageKitBackend/PackageKitSourcesBackend.cpp b/libdiscover/backends/PackageKitBackend/PackageKitSourcesBackend.cpp
index 0130aba4..b6607fa0 100644
--- a/libdiscover/backends/PackageKitBackend/PackageKitSourcesBackend.cpp
+++ b/libdiscover/backends/PackageKitBackend/PackageKitSourcesBackend.cpp
@@ -9,10 +9,10 @@
 #include <KLocalizedString>
 #include <KDesktopFile>
 #include <PackageKit/Daemon>
-#include <QAction>
 #include <QProcess>
 #include <QDebug>
 #include <QRegularExpression>
+#include <resources/DiscoverAction.h>
 #include <resources/SourcesModel.h>
 #include <resources/AbstractResourcesBackend.h>
 #include "PackageKitBackend.h"
@@ -45,14 +45,14 @@ private:
     PackageKitSourcesBackend* m_backend;
 };
 
-static QAction* createActionForService(const QString &servicePath, QObject* parent)
+static DiscoverAction* createActionForService(const QString &servicePath, QObject* parent)
 {
-    QAction* action = new QAction(parent);
+    DiscoverAction* action = new DiscoverAction(parent);
     KDesktopFile parser(servicePath);
     action->setIcon(QIcon::fromTheme(parser.readIcon()));
     action->setText(parser.readName());
     action->setToolTip(parser.readComment());
-    QObject::connect(action, &QAction::triggered, action, [servicePath](){
+    QObject::connect(action, &DiscoverAction::triggered, action, [servicePath](){
         bool b = QProcess::startDetached(QStringLiteral(CMAKE_INSTALL_FULL_LIBEXECDIR_KF5 "/discover/runservice"), {servicePath});
         if (!b)
             qWarning() << "Could not start" << servicePath;
diff --git a/libdiscover/backends/PackageKitBackend/PackageKitUpdater.cpp b/libdiscover/backends/PackageKitBackend/PackageKitUpdater.cpp
index 661b6732..ea6bdb5f 100644
--- a/libdiscover/backends/PackageKitBackend/PackageKitUpdater.cpp
+++ b/libdiscover/backends/PackageKitBackend/PackageKitUpdater.cpp
@@ -9,7 +9,6 @@
 #include <PackageKit/Daemon>
 #include <PackageKit/Offline>
 #include <QDebug>
-#include <QAction>
 #include <QSet>
 
 #include <KLocalizedString>
diff --git a/libdiscover/backends/SnapBackend/CMakeLists.txt b/libdiscover/backends/SnapBackend/CMakeLists.txt
index c75cd6aa..b2a3b1be 100644
--- a/libdiscover/backends/SnapBackend/CMakeLists.txt
+++ b/libdiscover/backends/SnapBackend/CMakeLists.txt
@@ -1,7 +1,7 @@
 add_subdirectory(libsnapclient)
 
 add_library(snap-backend MODULE SnapResource.cpp SnapBackend.cpp SnapTransaction.cpp snapui.qrc)
-target_link_libraries(snap-backend Qt5::Core Qt5::Concurrent KF5::CoreAddons KF5::ConfigCore Discover::Common Snapd::Core)
+target_link_libraries(snap-backend Qt5::Gui Qt5::Core Qt5::Concurrent KF5::CoreAddons KF5::ConfigCore Discover::Common Snapd::Core)
 
 if ("${Snapd_VERSION}" VERSION_GREATER 1.40)
     target_compile_definitions(snap-backend PRIVATE -DSNAP_COMMON_IDS -DSNAP_CHANNELS)
diff --git a/libdiscover/backends/SnapBackend/SnapBackend.cpp b/libdiscover/backends/SnapBackend/SnapBackend.cpp
index 0f3c25cd..c14ac1cd 100644
--- a/libdiscover/backends/SnapBackend/SnapBackend.cpp
+++ b/libdiscover/backends/SnapBackend/SnapBackend.cpp
@@ -23,7 +23,6 @@
 #include <QDebug>
 #include <QThread>
 #include <QTimer>
-#include <QAction>
 #include <QStandardItemModel>
 #include <QtConcurrentMap>
 #include <QtConcurrentRun>
diff --git a/libdiscover/resources/AbstractSourcesBackend.h b/libdiscover/resources/AbstractSourcesBackend.h
index 12d3d926..34ccb15d 100644
--- a/libdiscover/resources/AbstractSourcesBackend.h
+++ b/libdiscover/resources/AbstractSourcesBackend.h
@@ -10,7 +10,6 @@
 #include <QObject>
 #include "discovercommon_export.h"
 
-class QAction;
 class QAbstractItemModel;
 class AbstractResourcesBackend;
 
@@ -20,7 +19,7 @@ class DISCOVERCOMMON_EXPORT AbstractSourcesBackend : public QObject
     Q_PROPERTY(AbstractResourcesBackend* resourcesBackend READ resourcesBackend CONSTANT)
     Q_PROPERTY(QAbstractItemModel* sources READ sources CONSTANT)
     Q_PROPERTY(QString idDescription READ idDescription CONSTANT)
-    Q_PROPERTY(QVariantList actions READ actions CONSTANT) //TODO Make it a QVector<QAction*> again when we depend on newer than Qt 5.12
+    Q_PROPERTY(QVariantList actions READ actions CONSTANT) //TODO Make it a QVector<DiscoverAction*> again when we depend on newer than Qt 5.12
     Q_PROPERTY(bool supportsAdding READ supportsAdding CONSTANT)
     Q_PROPERTY(bool canMoveSources READ canMoveSources CONSTANT)
     Q_PROPERTY(bool canFilterSources READ canFilterSources CONSTANT)
diff --git a/libdiscover/resources/DiscoverAction.cpp b/libdiscover/resources/DiscoverAction.cpp
new file mode 100644
index 00000000..f4d41a2d
--- /dev/null
+++ b/libdiscover/resources/DiscoverAction.cpp
@@ -0,0 +1,75 @@
+/*
+ *   SPDX-FileCopyrightText: 2020 Aleix Pol Gonzalez <aleixpol@blue-systems.com>
+ *
+ *   SPDX-License-Identifier: GPL-2.0-only OR GPL-3.0-only OR LicenseRef-KDE-Accepted-GPL
+ */
+
+#include "DiscoverAction.h"
+
+DiscoverAction::DiscoverAction(QObject* parent)
+    : QObject(parent)
+{
+}
+
+DiscoverAction::DiscoverAction(const QIcon icon, const QString &text, QObject* parent)
+    : QObject(parent)
+    , m_text(text)
+    , m_icon(icon)
+{
+}
+
+DiscoverAction::DiscoverAction(const QString &text, QObject* parent)
+    : QObject(parent)
+    , m_text(text)
+{
+}
+
+void DiscoverAction::setEnabled(bool enabled)
+{
+    if (enabled == m_isEnabled)
+        return;
+
+    m_isEnabled = enabled;
+    Q_EMIT enabledChanged(enabled);
+}
+
+void DiscoverAction::setVisible(bool visible)
+{
+    if (visible == m_isVisible)
+        return;
+
+    m_isVisible = visible;
+    Q_EMIT visibleChanged(visible);
+}
+
+void DiscoverAction::setIcon(const QIcon& icon)
+{
+    if (icon.name() == m_icon.name() && !icon.name().isEmpty())
+        return;
+
+    m_icon = icon;
+    Q_EMIT iconChanged(icon);
+}
+
+void DiscoverAction::setText(const QString& text)
+{
+    if (text != m_text)
+        return;
+
+    m_text = text;
+    Q_EMIT textChanged(text);
+}
+
+void DiscoverAction::setToolTip(const QString& toolTip)
+{
+    if (toolTip != m_toolTip)
+        return;
+
+    m_toolTip = toolTip;
+    Q_EMIT toolTipChanged(toolTip);
+}
+
+void DiscoverAction::trigger()
+{
+    Q_EMIT triggered();
+}
diff --git a/libdiscover/resources/DiscoverAction.h b/libdiscover/resources/DiscoverAction.h
new file mode 100644
index 00000000..c84099a0
--- /dev/null
+++ b/libdiscover/resources/DiscoverAction.h
@@ -0,0 +1,59 @@
+/*
+ *   SPDX-FileCopyrightText: 2020 Aleix Pol Gonzalez <aleixpol@blue-systems.com>
+ *
+ *   SPDX-License-Identifier: GPL-2.0-only OR GPL-3.0-only OR LicenseRef-KDE-Accepted-GPL
+ */
+
+#pragma once
+
+#include <QObject>
+#include <QIcon>
+#include "discovercommon_export.h"
+
+/**
+ * An action class that doesn't need QtWidgets
+ */
+class DISCOVERCOMMON_EXPORT DiscoverAction : public QObject
+{
+    Q_OBJECT
+    Q_PROPERTY(QString text READ text WRITE setText NOTIFY textChanged)
+    Q_PROPERTY(QString toolTip READ toolTip WRITE setToolTip NOTIFY textChanged)
+    Q_PROPERTY(QIcon icon READ icon WRITE setIcon NOTIFY iconChanged)
+    Q_PROPERTY(bool enabled READ isEnabled WRITE setEnabled NOTIFY enabledChanged)
+    Q_PROPERTY(bool visible READ isVisible WRITE setVisible NOTIFY visibleChanged)
+public:
+    DiscoverAction(QObject* parent = nullptr);
+    DiscoverAction(const QString &text, QObject* parent = nullptr);
+    DiscoverAction(const QIcon icon, const QString &text, QObject* parent = nullptr);
+
+    void setText(const QString &text);
+    void setToolTip(const QString &toolTip);
+    void setIcon(const QIcon &icon);
+    void setEnabled(bool enabled);
+    void setVisible(bool enabled);
+
+    bool isVisible() const { return m_isVisible; }
+    bool isEnabled() const { return m_isEnabled; }
+    QString text() const { return m_text; }
+    QString toolTip() const { return m_toolTip; }
+    QIcon icon() const { return m_icon; }
+
+public Q_SLOTS:
+    void trigger();
+
+Q_SIGNALS:
+    void triggered();
+
+    void textChanged(const QString &text);
+    void toolTipChanged(const QString &toolTip);
+    void iconChanged(const QIcon &icon);
+    void visibleChanged(bool isVisible);
+    void enabledChanged(bool isEnabled);
+
+private:
+    bool m_isVisible = true;
+    bool m_isEnabled = true;
+    QString m_text;
+    QString m_toolTip;
+    QIcon m_icon;
+};
diff --git a/libdiscover/resources/ResourcesModel.cpp b/libdiscover/resources/ResourcesModel.cpp
index 2f897884..e7bfc321 100644
--- a/libdiscover/resources/ResourcesModel.cpp
+++ b/libdiscover/resources/ResourcesModel.cpp
@@ -19,8 +19,9 @@
 #include "libdiscover_debug.h"
 #include <functional>
 #include <QCoreApplication>
+#include <QIcon>
 #include <QThread>
-#include <QAction>
+#include <resources/DiscoverAction.h>
 #include <QMetaProperty>
 #include <KLocalizedString>
 #include <KSharedConfig>
@@ -84,15 +85,14 @@ void ResourcesModel::init(bool load)
         QMetaObject::invokeMethod(this, "registerAllBackends", Qt::QueuedConnection);
 
 
-    m_updateAction = new QAction(this);
+    m_updateAction = new DiscoverAction(this);
     m_updateAction->setIcon(QIcon::fromTheme(QStringLiteral("system-software-update")));
     m_updateAction->setText(i18nc("@action Checks the Internet for updates", "Check for Updates"));
-    m_updateAction->setShortcut(QKeySequence(Qt::CTRL | Qt::Key_R));
     connect(this, &ResourcesModel::fetchingChanged, m_updateAction, [this](bool fetching) {
         m_updateAction->setEnabled(!fetching);
         m_fetchingUpdatesProgress.reevaluate();
     });
-    connect(m_updateAction, &QAction::triggered, this, &ResourcesModel::checkForUpdates);
+    connect(m_updateAction, &DiscoverAction::triggered, this, &ResourcesModel::checkForUpdates);
 
     connect(QCoreApplication::instance(), &QCoreApplication::aboutToQuit, this, &QObject::deleteLater);
 }
diff --git a/libdiscover/resources/ResourcesModel.h b/libdiscover/resources/ResourcesModel.h
index 9640d103..cb6b0181 100644
--- a/libdiscover/resources/ResourcesModel.h
+++ b/libdiscover/resources/ResourcesModel.h
@@ -14,7 +14,7 @@
 #include "discovercommon_export.h"
 #include "AbstractResourcesBackend.h"
 
-class QAction;
+class DiscoverAction;
 
 class DISCOVERCOMMON_EXPORT AggregatedResultsStream : public ResultsStream
 {
@@ -71,7 +71,7 @@ class DISCOVERCOMMON_EXPORT ResourcesModel : public QObject
     Q_PROPERTY(bool isFetching READ isFetching NOTIFY fetchingChanged)
     Q_PROPERTY(QVariantList backends READ backendsVariant NOTIFY backendsChanged)
     Q_PROPERTY(AbstractResourcesBackend* currentApplicationBackend READ currentApplicationBackend WRITE setCurrentApplicationBackend NOTIFY currentApplicationBackendChanged)
-    Q_PROPERTY(QAction* updateAction READ updateAction CONSTANT)
+    Q_PROPERTY(DiscoverAction* updateAction READ updateAction CONSTANT)
     Q_PROPERTY(int fetchingUpdatesProgress READ fetchingUpdatesProgress NOTIFY fetchingUpdatesProgressChanged)
     Q_PROPERTY(QString applicationSourceName READ applicationSourceName NOTIFY currentApplicationBackendChanged)
     public:
@@ -100,7 +100,7 @@ class DISCOVERCOMMON_EXPORT ResourcesModel : public QObject
         void setCurrentApplicationBackend(AbstractResourcesBackend* backend, bool writeConfig = true);
         AbstractResourcesBackend* currentApplicationBackend() const;
 
-        QAction* updateAction() const { return m_updateAction; }
+        DiscoverAction* updateAction() const { return m_updateAction; }
         int fetchingUpdatesProgress() const { return m_fetchingUpdatesProgress.m_value; }
 
     public Q_SLOTS:
@@ -137,7 +137,7 @@ class DISCOVERCOMMON_EXPORT ResourcesModel : public QObject
         bool m_isFetching;
         QVector< AbstractResourcesBackend* > m_backends;
         int m_initializingBackends;
-        QAction* m_updateAction = nullptr;
+        DiscoverAction* m_updateAction = nullptr;
         AbstractResourcesBackend* m_currentApplicationBackend;
         QTimer* m_allInitializedEmitter;
 
diff --git a/libdiscover/resources/ResourcesUpdatesModel.cpp b/libdiscover/resources/ResourcesUpdatesModel.cpp
index a7f936eb..b8df29ff 100644
--- a/libdiscover/resources/ResourcesUpdatesModel.cpp
+++ b/libdiscover/resources/ResourcesUpdatesModel.cpp
@@ -187,7 +187,7 @@ void ResourcesUpdatesModel::updateAll()
         setTransaction(m_transaction);
         TransactionModel::global()->addTransaction(m_transaction);
         Q_FOREACH (AbstractBackendUpdater* upd, updaters) {
-            QMetaObject::invokeMethod(upd, "start", Qt::QueuedConnection);
+            QMetaObject::invokeMethod(upd, &AbstractBackendUpdater::start, Qt::QueuedConnection);
         }
 
         QMetaObject::invokeMethod(this, [this](){
diff --git a/libdiscover/resources/SourcesModel.cpp b/libdiscover/resources/SourcesModel.cpp
index 8d1f985a..93e43784 100644
--- a/libdiscover/resources/SourcesModel.cpp
+++ b/libdiscover/resources/SourcesModel.cpp
@@ -7,7 +7,6 @@
 #include "SourcesModel.h"
 #include <QtGlobal>
 #include "libdiscover_debug.h"
-#include <QAction>
 #include "resources/AbstractResourcesBackend.h"
 #include "resources/AbstractSourcesBackend.h"
 
diff --git a/update/main.cpp b/update/main.cpp
index c40ad326..a3c12c64 100644
--- a/update/main.cpp
+++ b/update/main.cpp
@@ -4,7 +4,7 @@
  *   SPDX-License-Identifier: LGPL-2.0-or-later
  */
 
-#include <QApplication>
+#include <QGuiApplication>
 #include <QCommandLineParser>
 #include <KLocalizedString>
 #include <KAboutData>
@@ -14,7 +14,7 @@
 
 int main(int argc, char** argv)
 {
-    QApplication app(argc, argv);
+    QGuiApplication app(argc, argv);
     app.setQuitOnLastWindowClosed(false);
     KLocalizedString::setApplicationDomain("plasma-discover-update");
     KAboutData about(QStringLiteral("discoverupdate"), i18n("Discover Update"), version, {},

