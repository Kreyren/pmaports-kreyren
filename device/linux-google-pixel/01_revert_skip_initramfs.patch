diff --git a/include/linux/initramfs.h b/include/linux/initramfs.h
deleted file mode 100644
index fc7da63b125..00000000000
--- a/include/linux/initramfs.h
+++ /dev/null
@@ -1,32 +0,0 @@
-/*
- * include/linux/initramfs.h
- *
- * Copyright (C) 2015, Google
- * Rom Lemarchand <romlem@android.com>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; version 2 of the License.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
- */
-
-#ifndef _LINUX_INITRAMFS_H
-#define _LINUX_INITRAMFS_H
-
-#include <linux/kconfig.h>
-
-#if IS_BUILTIN(CONFIG_BLK_DEV_INITRD)
-
-int __init default_rootfs(void);
-
-#endif
-
-#endif /* _LINUX_INITRAMFS_H */
diff --git a/init/Makefile b/init/Makefile
index 243f61de2cb..90410fd7b65 100644
--- a/init/Makefile
+++ b/init/Makefile
@@ -3,8 +3,11 @@
 #
 
 obj-y                          := main.o version.o mounts.o
+ifneq ($(CONFIG_BLK_DEV_INITRD),y)
 obj-y                          += noinitramfs.o
+else
 obj-$(CONFIG_BLK_DEV_INITRD)   += initramfs.o
+endif
 obj-$(CONFIG_GENERIC_CALIBRATE_DELAY) += calibrate.o
 
 ifneq ($(CONFIG_ARCH_INIT_TASK),y)
diff --git a/init/initramfs.c b/init/initramfs.c
index d39079e690f..ad1bd7787bb 100644
--- a/init/initramfs.c
+++ b/init/initramfs.c
@@ -18,7 +18,6 @@
 #include <linux/dirent.h>
 #include <linux/syscalls.h>
 #include <linux/utime.h>
-#include <linux/initramfs.h>
 
 static ssize_t __init xwrite(int fd, const char *p, size_t count)
 {
@@ -606,25 +605,9 @@ static void __init clean_rootfs(void)
 }
 #endif
 
-static int __initdata do_skip_initramfs;
-
-static int __init skip_initramfs_param(char *str)
-{
-	if (*str)
-		return 0;
-	do_skip_initramfs = 1;
-	return 1;
-}
-__setup("skip_initramfs", skip_initramfs_param);
-
 static int __init populate_rootfs(void)
 {
-	char *err;
-
-	if (do_skip_initramfs)
-		return default_rootfs();
-
-	err = unpack_to_rootfs(__initramfs_start, __initramfs_size);
+	char *err = unpack_to_rootfs(__initramfs_start, __initramfs_size);
 	if (err)
 		panic("%s", err); /* Failed to decompress INTERNAL initramfs */
 	if (initrd_start) {
diff --git a/init/noinitramfs.c b/init/noinitramfs.c
index bcc8bcb053e..267739d8517 100644
--- a/init/noinitramfs.c
+++ b/init/noinitramfs.c
@@ -21,16 +21,11 @@
 #include <linux/stat.h>
 #include <linux/kdev_t.h>
 #include <linux/syscalls.h>
-#include <linux/kconfig.h>
-#include <linux/initramfs.h>
 
 /*
  * Create a simple rootfs that is similar to the default initramfs
  */
-#if !IS_BUILTIN(CONFIG_BLK_DEV_INITRD)
-static
-#endif
-int __init default_rootfs(void)
+static int __init default_rootfs(void)
 {
 	int err;
 
@@ -54,6 +49,4 @@ out:
 	printk(KERN_WARNING "Failed to create a rootfs\n");
 	return err;
 }
-#if !IS_BUILTIN(CONFIG_BLK_DEV_INITRD)
 rootfs_initcall(default_rootfs);
-#endif

