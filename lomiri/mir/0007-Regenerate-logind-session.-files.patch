From c164c2594bf2e7cef8bf0e945fa912e7d654d2cd Mon Sep 17 00:00:00 2001
From: Luca Weiss <luca.weiss@fairphone.com>
Date: Tue, 14 Feb 2023 08:59:42 +0100
Subject: [PATCH 7/8] Regenerate logind-session.* files

Based on latest xml with gdbus-codegen 2.74.5
---
 src/server/console/logind-session.c | 1353 +++++++++++++++++++--------
 src/server/console/logind-session.h |  194 ++--
 2 files changed, 1094 insertions(+), 453 deletions(-)

diff --git a/src/server/console/logind-session.c b/src/server/console/logind-session.c
index 66fe87a5e8..7baf4f9d0d 100644
--- a/src/server/console/logind-session.c
+++ b/src/server/console/logind-session.c
@@ -1,8 +1,9 @@
 /*
- * Generated by gdbus-codegen 2.56.0. DO NOT EDIT.
+ * This file is generated by gdbus-codegen, do not modify it.
  *
  * The license of this code is the same as for the D-Bus interface description
- * it was derived from.
+ * it was derived from. Note that it links to GLib, so must comply with the
+ * LGPL linking clauses.
  */
 
 #ifdef HAVE_CONFIG_H
@@ -39,7 +40,8 @@ typedef struct
 {
   GDBusPropertyInfo parent_struct;
   const gchar *hyphen_name;
-  gboolean use_gvariant;
+  guint use_gvariant : 1;
+  guint emits_changed_signal : 1;
 } _ExtendedGDBusPropertyInfo;
 
 typedef struct
@@ -216,20 +218,20 @@ static const _ExtendedGDBusMethodInfo _logind_session_method_info_unlock =
   FALSE
 };
 
-static const _ExtendedGDBusArgInfo _logind_session_method_info_set_idle_hint_IN_ARG_unnamed_arg0 =
+static const _ExtendedGDBusArgInfo _logind_session_method_info_set_idle_hint_IN_ARG_idle =
 {
   {
     -1,
-    (gchar *) "unnamed_arg0",
+    (gchar *) "idle",
     (gchar *) "b",
     NULL
   },
   FALSE
 };
 
-static const _ExtendedGDBusArgInfo * const _logind_session_method_info_set_idle_hint_IN_ARG_pointers[] =
+static const GDBusArgInfo * const _logind_session_method_info_set_idle_hint_IN_ARG_pointers[] =
 {
-  &_logind_session_method_info_set_idle_hint_IN_ARG_unnamed_arg0,
+  &_logind_session_method_info_set_idle_hint_IN_ARG_idle.parent_struct,
   NULL
 };
 
@@ -246,20 +248,20 @@ static const _ExtendedGDBusMethodInfo _logind_session_method_info_set_idle_hint
   FALSE
 };
 
-static const _ExtendedGDBusArgInfo _logind_session_method_info_set_locked_hint_IN_ARG_unnamed_arg0 =
+static const _ExtendedGDBusArgInfo _logind_session_method_info_set_locked_hint_IN_ARG_locked =
 {
   {
     -1,
-    (gchar *) "unnamed_arg0",
+    (gchar *) "locked",
     (gchar *) "b",
     NULL
   },
   FALSE
 };
 
-static const _ExtendedGDBusArgInfo * const _logind_session_method_info_set_locked_hint_IN_ARG_pointers[] =
+static const GDBusArgInfo * const _logind_session_method_info_set_locked_hint_IN_ARG_pointers[] =
 {
-  &_logind_session_method_info_set_locked_hint_IN_ARG_unnamed_arg0,
+  &_logind_session_method_info_set_locked_hint_IN_ARG_locked.parent_struct,
   NULL
 };
 
@@ -276,32 +278,32 @@ static const _ExtendedGDBusMethodInfo _logind_session_method_info_set_locked_hin
   FALSE
 };
 
-static const _ExtendedGDBusArgInfo _logind_session_method_info_kill_IN_ARG_unnamed_arg0 =
+static const _ExtendedGDBusArgInfo _logind_session_method_info_kill_IN_ARG_who =
 {
   {
     -1,
-    (gchar *) "unnamed_arg0",
+    (gchar *) "who",
     (gchar *) "s",
     NULL
   },
   FALSE
 };
 
-static const _ExtendedGDBusArgInfo _logind_session_method_info_kill_IN_ARG_unnamed_arg1 =
+static const _ExtendedGDBusArgInfo _logind_session_method_info_kill_IN_ARG_signal_number =
 {
   {
     -1,
-    (gchar *) "unnamed_arg1",
+    (gchar *) "signal_number",
     (gchar *) "i",
     NULL
   },
   FALSE
 };
 
-static const _ExtendedGDBusArgInfo * const _logind_session_method_info_kill_IN_ARG_pointers[] =
+static const GDBusArgInfo * const _logind_session_method_info_kill_IN_ARG_pointers[] =
 {
-  &_logind_session_method_info_kill_IN_ARG_unnamed_arg0,
-  &_logind_session_method_info_kill_IN_ARG_unnamed_arg1,
+  &_logind_session_method_info_kill_IN_ARG_who.parent_struct,
+  &_logind_session_method_info_kill_IN_ARG_signal_number.parent_struct,
   NULL
 };
 
@@ -318,20 +320,20 @@ static const _ExtendedGDBusMethodInfo _logind_session_method_info_kill =
   FALSE
 };
 
-static const _ExtendedGDBusArgInfo _logind_session_method_info_take_control_IN_ARG_unnamed_arg0 =
+static const _ExtendedGDBusArgInfo _logind_session_method_info_take_control_IN_ARG_force =
 {
   {
     -1,
-    (gchar *) "unnamed_arg0",
+    (gchar *) "force",
     (gchar *) "b",
     NULL
   },
   FALSE
 };
 
-static const _ExtendedGDBusArgInfo * const _logind_session_method_info_take_control_IN_ARG_pointers[] =
+static const GDBusArgInfo * const _logind_session_method_info_take_control_IN_ARG_pointers[] =
 {
-  &_logind_session_method_info_take_control_IN_ARG_unnamed_arg0,
+  &_logind_session_method_info_take_control_IN_ARG_force.parent_struct,
   NULL
 };
 
@@ -361,61 +363,121 @@ static const _ExtendedGDBusMethodInfo _logind_session_method_info_release_contro
   FALSE
 };
 
-static const _ExtendedGDBusArgInfo _logind_session_method_info_take_device_IN_ARG_unnamed_arg0 =
+static const _ExtendedGDBusArgInfo _logind_session_method_info_set_type_IN_ARG_type =
+{
+  {
+    -1,
+    (gchar *) "type",
+    (gchar *) "s",
+    NULL
+  },
+  FALSE
+};
+
+static const GDBusArgInfo * const _logind_session_method_info_set_type_IN_ARG_pointers[] =
+{
+  &_logind_session_method_info_set_type_IN_ARG_type.parent_struct,
+  NULL
+};
+
+static const _ExtendedGDBusMethodInfo _logind_session_method_info_set_type =
+{
+  {
+    -1,
+    (gchar *) "SetType",
+    (GDBusArgInfo **) &_logind_session_method_info_set_type_IN_ARG_pointers,
+    NULL,
+    NULL
+  },
+  "handle-set-type",
+  FALSE
+};
+
+static const _ExtendedGDBusArgInfo _logind_session_method_info_set_display_IN_ARG_display =
+{
+  {
+    -1,
+    (gchar *) "display",
+    (gchar *) "s",
+    NULL
+  },
+  FALSE
+};
+
+static const GDBusArgInfo * const _logind_session_method_info_set_display_IN_ARG_pointers[] =
+{
+  &_logind_session_method_info_set_display_IN_ARG_display.parent_struct,
+  NULL
+};
+
+static const _ExtendedGDBusMethodInfo _logind_session_method_info_set_display =
 {
   {
     -1,
-    (gchar *) "unnamed_arg0",
+    (gchar *) "SetDisplay",
+    (GDBusArgInfo **) &_logind_session_method_info_set_display_IN_ARG_pointers,
+    NULL,
+    NULL
+  },
+  "handle-set-display",
+  FALSE
+};
+
+static const _ExtendedGDBusArgInfo _logind_session_method_info_take_device_IN_ARG_major =
+{
+  {
+    -1,
+    (gchar *) "major",
     (gchar *) "u",
     NULL
   },
   FALSE
 };
 
-static const _ExtendedGDBusArgInfo _logind_session_method_info_take_device_IN_ARG_unnamed_arg1 =
+static const _ExtendedGDBusArgInfo _logind_session_method_info_take_device_IN_ARG_minor =
 {
   {
     -1,
-    (gchar *) "unnamed_arg1",
+    (gchar *) "minor",
     (gchar *) "u",
     NULL
   },
   FALSE
 };
 
-static const _ExtendedGDBusArgInfo * const _logind_session_method_info_take_device_IN_ARG_pointers[] =
+static const GDBusArgInfo * const _logind_session_method_info_take_device_IN_ARG_pointers[] =
 {
-  &_logind_session_method_info_take_device_IN_ARG_unnamed_arg0,
-  &_logind_session_method_info_take_device_IN_ARG_unnamed_arg1,
+  &_logind_session_method_info_take_device_IN_ARG_major.parent_struct,
+  &_logind_session_method_info_take_device_IN_ARG_minor.parent_struct,
   NULL
 };
 
-static const _ExtendedGDBusArgInfo _logind_session_method_info_take_device_OUT_ARG_unnamed_arg2 =
+static const _ExtendedGDBusArgInfo _logind_session_method_info_take_device_OUT_ARG_fd =
 {
   {
     -1,
-    (gchar *) "unnamed_arg2",
+    (gchar *) "fd",
     (gchar *) "h",
     NULL
   },
   FALSE
 };
 
-static const _ExtendedGDBusArgInfo _logind_session_method_info_take_device_OUT_ARG_unnamed_arg3 =
+static const _ExtendedGDBusArgInfo _logind_session_method_info_take_device_OUT_ARG_inactive =
 {
   {
     -1,
-    (gchar *) "unnamed_arg3",
+    (gchar *) "inactive",
     (gchar *) "b",
     NULL
   },
   FALSE
 };
 
-static const _ExtendedGDBusArgInfo * const _logind_session_method_info_take_device_OUT_ARG_pointers[] =
+static const GDBusArgInfo * const _logind_session_method_info_take_device_OUT_ARG_pointers[] =
 {
-  &_logind_session_method_info_take_device_OUT_ARG_unnamed_arg2,
-  &_logind_session_method_info_take_device_OUT_ARG_unnamed_arg3,
+  &_logind_session_method_info_take_device_OUT_ARG_fd.parent_struct,
+  &_logind_session_method_info_take_device_OUT_ARG_inactive.parent_struct,
   NULL
 };
 
@@ -432,32 +494,32 @@ static const _ExtendedGDBusMethodInfo _logind_session_method_info_take_device =
   FALSE
 };
 
-static const _ExtendedGDBusArgInfo _logind_session_method_info_release_device_IN_ARG_unnamed_arg0 =
+static const _ExtendedGDBusArgInfo _logind_session_method_info_release_device_IN_ARG_major =
 {
   {
     -1,
-    (gchar *) "unnamed_arg0",
+    (gchar *) "major",
     (gchar *) "u",
     NULL
   },
   FALSE
 };
 
-static const _ExtendedGDBusArgInfo _logind_session_method_info_release_device_IN_ARG_unnamed_arg1 =
+static const _ExtendedGDBusArgInfo _logind_session_method_info_release_device_IN_ARG_minor =
 {
   {
     -1,
-    (gchar *) "unnamed_arg1",
+    (gchar *) "minor",
     (gchar *) "u",
     NULL
   },
   FALSE
 };
 
-static const _ExtendedGDBusArgInfo * const _logind_session_method_info_release_device_IN_ARG_pointers[] =
+static const GDBusArgInfo * const _logind_session_method_info_release_device_IN_ARG_pointers[] =
 {
-  &_logind_session_method_info_release_device_IN_ARG_unnamed_arg0,
-  &_logind_session_method_info_release_device_IN_ARG_unnamed_arg1,
+  &_logind_session_method_info_release_device_IN_ARG_major.parent_struct,
+  &_logind_session_method_info_release_device_IN_ARG_minor.parent_struct,
   NULL
 };
 
@@ -474,32 +536,32 @@ static const _ExtendedGDBusMethodInfo _logind_session_method_info_release_device
   FALSE
 };
 
-static const _ExtendedGDBusArgInfo _logind_session_method_info_pause_device_complete_IN_ARG_unnamed_arg0 =
+static const _ExtendedGDBusArgInfo _logind_session_method_info_pause_device_complete_IN_ARG_major =
 {
   {
     -1,
-    (gchar *) "unnamed_arg0",
+    (gchar *) "major",
     (gchar *) "u",
     NULL
   },
   FALSE
 };
 
-static const _ExtendedGDBusArgInfo _logind_session_method_info_pause_device_complete_IN_ARG_unnamed_arg1 =
+static const _ExtendedGDBusArgInfo _logind_session_method_info_pause_device_complete_IN_ARG_minor =
 {
   {
     -1,
-    (gchar *) "unnamed_arg1",
+    (gchar *) "minor",
     (gchar *) "u",
     NULL
   },
   FALSE
 };
 
-static const _ExtendedGDBusArgInfo * const _logind_session_method_info_pause_device_complete_IN_ARG_pointers[] =
+static const GDBusArgInfo * const _logind_session_method_info_pause_device_complete_IN_ARG_pointers[] =
 {
-  &_logind_session_method_info_pause_device_complete_IN_ARG_unnamed_arg0,
-  &_logind_session_method_info_pause_device_complete_IN_ARG_unnamed_arg1,
+  &_logind_session_method_info_pause_device_complete_IN_ARG_major.parent_struct,
+  &_logind_session_method_info_pause_device_complete_IN_ARG_minor.parent_struct,
   NULL
 };
 
@@ -516,61 +578,118 @@ static const _ExtendedGDBusMethodInfo _logind_session_method_info_pause_device_c
   FALSE
 };
 
-static const _ExtendedGDBusMethodInfo * const _logind_session_method_info_pointers[] =
-{
-  &_logind_session_method_info_terminate,
-  &_logind_session_method_info_activate,
-  &_logind_session_method_info_lock,
-  &_logind_session_method_info_unlock,
-  &_logind_session_method_info_set_idle_hint,
-  &_logind_session_method_info_set_locked_hint,
-  &_logind_session_method_info_kill,
-  &_logind_session_method_info_take_control,
-  &_logind_session_method_info_release_control,
-  &_logind_session_method_info_take_device,
-  &_logind_session_method_info_release_device,
-  &_logind_session_method_info_pause_device_complete,
+static const _ExtendedGDBusArgInfo _logind_session_method_info_set_brightness_IN_ARG_subsystem =
+{
+  {
+    -1,
+    (gchar *) "subsystem",
+    (gchar *) "s",
+    NULL
+  },
+  FALSE
+};
+
+static const _ExtendedGDBusArgInfo _logind_session_method_info_set_brightness_IN_ARG_name =
+{
+  {
+    -1,
+    (gchar *) "name",
+    (gchar *) "s",
+    NULL
+  },
+  FALSE
+};
+
+static const _ExtendedGDBusArgInfo _logind_session_method_info_set_brightness_IN_ARG_brightness =
+{
+  {
+    -1,
+    (gchar *) "brightness",
+    (gchar *) "u",
+    NULL
+  },
+  FALSE
+};
+
+static const GDBusArgInfo * const _logind_session_method_info_set_brightness_IN_ARG_pointers[] =
+{
+  &_logind_session_method_info_set_brightness_IN_ARG_subsystem.parent_struct,
+  &_logind_session_method_info_set_brightness_IN_ARG_name.parent_struct,
+  &_logind_session_method_info_set_brightness_IN_ARG_brightness.parent_struct,
+  NULL
+};
+
+static const _ExtendedGDBusMethodInfo _logind_session_method_info_set_brightness =
+{
+  {
+    -1,
+    (gchar *) "SetBrightness",
+    (GDBusArgInfo **) &_logind_session_method_info_set_brightness_IN_ARG_pointers,
+    NULL,
+    NULL
+  },
+  "handle-set-brightness",
+  FALSE
+};
+
+static const GDBusMethodInfo * const _logind_session_method_info_pointers[] =
+{
+  &_logind_session_method_info_terminate.parent_struct,
+  &_logind_session_method_info_activate.parent_struct,
+  &_logind_session_method_info_lock.parent_struct,
+  &_logind_session_method_info_unlock.parent_struct,
+  &_logind_session_method_info_set_idle_hint.parent_struct,
+  &_logind_session_method_info_set_locked_hint.parent_struct,
+  &_logind_session_method_info_kill.parent_struct,
+  &_logind_session_method_info_take_control.parent_struct,
+  &_logind_session_method_info_release_control.parent_struct,
+  &_logind_session_method_info_set_type.parent_struct,
+  &_logind_session_method_info_set_display.parent_struct,
+  &_logind_session_method_info_take_device.parent_struct,
+  &_logind_session_method_info_release_device.parent_struct,
+  &_logind_session_method_info_pause_device_complete.parent_struct,
+  &_logind_session_method_info_set_brightness.parent_struct,
   NULL
 };
 
-static const _ExtendedGDBusArgInfo _logind_session_signal_info_pause_device_ARG_unnamed_arg0 =
+static const _ExtendedGDBusArgInfo _logind_session_signal_info_pause_device_ARG_major =
 {
   {
     -1,
-    (gchar *) "unnamed_arg0",
+    (gchar *) "major",
     (gchar *) "u",
     NULL
   },
   FALSE
 };
 
-static const _ExtendedGDBusArgInfo _logind_session_signal_info_pause_device_ARG_unnamed_arg1 =
+static const _ExtendedGDBusArgInfo _logind_session_signal_info_pause_device_ARG_minor =
 {
   {
     -1,
-    (gchar *) "unnamed_arg1",
+    (gchar *) "minor",
     (gchar *) "u",
     NULL
   },
   FALSE
 };
 
-static const _ExtendedGDBusArgInfo _logind_session_signal_info_pause_device_ARG_unnamed_arg2 =
+static const _ExtendedGDBusArgInfo _logind_session_signal_info_pause_device_ARG_type =
 {
   {
     -1,
-    (gchar *) "unnamed_arg2",
+    (gchar *) "type",
     (gchar *) "s",
     NULL
   },
   FALSE
 };
 
-static const _ExtendedGDBusArgInfo * const _logind_session_signal_info_pause_device_ARG_pointers[] =
+static const GDBusArgInfo * const _logind_session_signal_info_pause_device_ARG_pointers[] =
 {
-  &_logind_session_signal_info_pause_device_ARG_unnamed_arg0,
-  &_logind_session_signal_info_pause_device_ARG_unnamed_arg1,
-  &_logind_session_signal_info_pause_device_ARG_unnamed_arg2,
+  &_logind_session_signal_info_pause_device_ARG_major.parent_struct,
+  &_logind_session_signal_info_pause_device_ARG_minor.parent_struct,
+  &_logind_session_signal_info_pause_device_ARG_type.parent_struct,
   NULL
 };
 
@@ -585,44 +704,44 @@ static const _ExtendedGDBusSignalInfo _logind_session_signal_info_pause_device =
   "pause-device"
 };
 
-static const _ExtendedGDBusArgInfo _logind_session_signal_info_resume_device_ARG_unnamed_arg0 =
+static const _ExtendedGDBusArgInfo _logind_session_signal_info_resume_device_ARG_major =
 {
   {
     -1,
-    (gchar *) "unnamed_arg0",
+    (gchar *) "major",
     (gchar *) "u",
     NULL
   },
   FALSE
 };
 
-static const _ExtendedGDBusArgInfo _logind_session_signal_info_resume_device_ARG_unnamed_arg1 =
+static const _ExtendedGDBusArgInfo _logind_session_signal_info_resume_device_ARG_minor =
 {
   {
     -1,
-    (gchar *) "unnamed_arg1",
+    (gchar *) "minor",
     (gchar *) "u",
     NULL
   },
   FALSE
 };
 
-static const _ExtendedGDBusArgInfo _logind_session_signal_info_resume_device_ARG_unnamed_arg2 =
+static const _ExtendedGDBusArgInfo _logind_session_signal_info_resume_device_ARG_fd =
 {
   {
     -1,
-    (gchar *) "unnamed_arg2",
+    (gchar *) "fd",
     (gchar *) "h",
     NULL
   },
   FALSE
 };
 
-static const _ExtendedGDBusArgInfo * const _logind_session_signal_info_resume_device_ARG_pointers[] =
+static const GDBusArgInfo * const _logind_session_signal_info_resume_device_ARG_pointers[] =
 {
-  &_logind_session_signal_info_resume_device_ARG_unnamed_arg0,
-  &_logind_session_signal_info_resume_device_ARG_unnamed_arg1,
-  &_logind_session_signal_info_resume_device_ARG_unnamed_arg2,
+  &_logind_session_signal_info_resume_device_ARG_major.parent_struct,
+  &_logind_session_signal_info_resume_device_ARG_minor.parent_struct,
+  &_logind_session_signal_info_resume_device_ARG_fd.parent_struct,
   NULL
 };
 
@@ -659,12 +778,12 @@ static const _ExtendedGDBusSignalInfo _logind_session_signal_info_unlock =
   "unlock"
 };
 
-static const _ExtendedGDBusSignalInfo * const _logind_session_signal_info_pointers[] =
+static const GDBusSignalInfo * const _logind_session_signal_info_pointers[] =
 {
-  &_logind_session_signal_info_pause_device,
-  &_logind_session_signal_info_resume_device,
-  &_logind_session_signal_info_lock,
-  &_logind_session_signal_info_unlock,
+  &_logind_session_signal_info_pause_device.parent_struct,
+  &_logind_session_signal_info_resume_device.parent_struct,
+  &_logind_session_signal_info_lock.parent_struct,
+  &_logind_session_signal_info_unlock.parent_struct,
   NULL
 };
 
@@ -692,6 +811,7 @@ static const _ExtendedGDBusPropertyInfo _logind_session_property_info_id =
     (GDBusAnnotationInfo **) &_logind_session_property_id_annotation_info_pointers
   },
   "id",
+  FALSE,
   FALSE
 };
 
@@ -719,6 +839,7 @@ static const _ExtendedGDBusPropertyInfo _logind_session_property_info_user =
     (GDBusAnnotationInfo **) &_logind_session_property_user_annotation_info_pointers
   },
   "user",
+  FALSE,
   FALSE
 };
 
@@ -746,6 +867,7 @@ static const _ExtendedGDBusPropertyInfo _logind_session_property_info_name =
     (GDBusAnnotationInfo **) &_logind_session_property_name_annotation_info_pointers
   },
   "name",
+  FALSE,
   FALSE
 };
 
@@ -773,6 +895,7 @@ static const _ExtendedGDBusPropertyInfo _logind_session_property_info_timestamp
     (GDBusAnnotationInfo **) &_logind_session_property_timestamp_annotation_info_pointers
   },
   "timestamp",
+  FALSE,
   FALSE
 };
 
@@ -800,6 +923,7 @@ static const _ExtendedGDBusPropertyInfo _logind_session_property_info_timestamp_
     (GDBusAnnotationInfo **) &_logind_session_property_timestamp_monotonic_annotation_info_pointers
   },
   "timestamp-monotonic",
+  FALSE,
   FALSE
 };
 
@@ -827,6 +951,7 @@ static const _ExtendedGDBusPropertyInfo _logind_session_property_info_vtnr =
     (GDBusAnnotationInfo **) &_logind_session_property_vtnr_annotation_info_pointers
   },
   "vtnr",
+  FALSE,
   FALSE
 };
 
@@ -854,6 +979,7 @@ static const _ExtendedGDBusPropertyInfo _logind_session_property_info_seat =
     (GDBusAnnotationInfo **) &_logind_session_property_seat_annotation_info_pointers
   },
   "seat",
+  FALSE,
   FALSE
 };
 
@@ -881,6 +1007,7 @@ static const _ExtendedGDBusPropertyInfo _logind_session_property_info_tty =
     (GDBusAnnotationInfo **) &_logind_session_property_tty_annotation_info_pointers
   },
   "tty",
+  FALSE,
   FALSE
 };
 
@@ -908,6 +1035,7 @@ static const _ExtendedGDBusPropertyInfo _logind_session_property_info_display =
     (GDBusAnnotationInfo **) &_logind_session_property_display_annotation_info_pointers
   },
   "display",
+  FALSE,
   FALSE
 };
 
@@ -935,6 +1063,7 @@ static const _ExtendedGDBusPropertyInfo _logind_session_property_info_remote =
     (GDBusAnnotationInfo **) &_logind_session_property_remote_annotation_info_pointers
   },
   "remote",
+  FALSE,
   FALSE
 };
 
@@ -962,6 +1091,7 @@ static const _ExtendedGDBusPropertyInfo _logind_session_property_info_remote_hos
     (GDBusAnnotationInfo **) &_logind_session_property_remote_host_annotation_info_pointers
   },
   "remote-host",
+  FALSE,
   FALSE
 };
 
@@ -989,6 +1119,7 @@ static const _ExtendedGDBusPropertyInfo _logind_session_property_info_remote_use
     (GDBusAnnotationInfo **) &_logind_session_property_remote_user_annotation_info_pointers
   },
   "remote-user",
+  FALSE,
   FALSE
 };
 
@@ -1016,6 +1147,7 @@ static const _ExtendedGDBusPropertyInfo _logind_session_property_info_service =
     (GDBusAnnotationInfo **) &_logind_session_property_service_annotation_info_pointers
   },
   "service",
+  FALSE,
   FALSE
 };
 
@@ -1043,6 +1175,7 @@ static const _ExtendedGDBusPropertyInfo _logind_session_property_info_desktop =
     (GDBusAnnotationInfo **) &_logind_session_property_desktop_annotation_info_pointers
   },
   "desktop",
+  FALSE,
   FALSE
 };
 
@@ -1070,6 +1203,7 @@ static const _ExtendedGDBusPropertyInfo _logind_session_property_info_scope =
     (GDBusAnnotationInfo **) &_logind_session_property_scope_annotation_info_pointers
   },
   "scope",
+  FALSE,
   FALSE
 };
 
@@ -1097,6 +1231,7 @@ static const _ExtendedGDBusPropertyInfo _logind_session_property_info_leader =
     (GDBusAnnotationInfo **) &_logind_session_property_leader_annotation_info_pointers
   },
   "leader",
+  FALSE,
   FALSE
 };
 
@@ -1124,23 +1259,10 @@ static const _ExtendedGDBusPropertyInfo _logind_session_property_info_audit =
     (GDBusAnnotationInfo **) &_logind_session_property_audit_annotation_info_pointers
   },
   "audit",
+  FALSE,
   FALSE
 };
 
-static const GDBusAnnotationInfo _logind_session_property_type__annotation_info_0 =
-{
-  -1,
-  (gchar *) "org.freedesktop.DBus.Property.EmitsChangedSignal",
-  (gchar *) "const",
-  NULL
-};
-
-static const GDBusAnnotationInfo * const _logind_session_property_type__annotation_info_pointers[] =
-{
-  &_logind_session_property_type__annotation_info_0,
-  NULL
-};
-
 static const _ExtendedGDBusPropertyInfo _logind_session_property_info_type_ =
 {
   {
@@ -1148,10 +1270,11 @@ static const _ExtendedGDBusPropertyInfo _logind_session_property_info_type_ =
     (gchar *) "Type",
     (gchar *) "s",
     G_DBUS_PROPERTY_INFO_FLAGS_READABLE,
-    (GDBusAnnotationInfo **) &_logind_session_property_type__annotation_info_pointers
+    NULL
   },
   "type",
-  FALSE
+  FALSE,
+  TRUE
 };
 
 static const GDBusAnnotationInfo _logind_session_property_class_annotation_info_0 =
@@ -1178,6 +1301,7 @@ static const _ExtendedGDBusPropertyInfo _logind_session_property_info_class =
     (GDBusAnnotationInfo **) &_logind_session_property_class_annotation_info_pointers
   },
   "class",
+  FALSE,
   FALSE
 };
 
@@ -1191,21 +1315,8 @@ static const _ExtendedGDBusPropertyInfo _logind_session_property_info_active =
     NULL
   },
   "active",
-  FALSE
-};
-
-static const GDBusAnnotationInfo _logind_session_property_state_annotation_info_0 =
-{
-  -1,
-  (gchar *) "org.freedesktop.DBus.Property.EmitsChangedSignal",
-  (gchar *) "false",
-  NULL
-};
-
-static const GDBusAnnotationInfo * const _logind_session_property_state_annotation_info_pointers[] =
-{
-  &_logind_session_property_state_annotation_info_0,
-  NULL
+  FALSE,
+  TRUE
 };
 
 static const _ExtendedGDBusPropertyInfo _logind_session_property_info_state =
@@ -1215,10 +1326,11 @@ static const _ExtendedGDBusPropertyInfo _logind_session_property_info_state =
     (gchar *) "State",
     (gchar *) "s",
     G_DBUS_PROPERTY_INFO_FLAGS_READABLE,
-    (GDBusAnnotationInfo **) &_logind_session_property_state_annotation_info_pointers
+    NULL
   },
   "state",
-  FALSE
+  FALSE,
+  TRUE
 };
 
 static const _ExtendedGDBusPropertyInfo _logind_session_property_info_idle_hint =
@@ -1231,7 +1343,8 @@ static const _ExtendedGDBusPropertyInfo _logind_session_property_info_idle_hint
     NULL
   },
   "idle-hint",
-  FALSE
+  FALSE,
+  TRUE
 };
 
 static const _ExtendedGDBusPropertyInfo _logind_session_property_info_idle_since_hint =
@@ -1244,7 +1357,8 @@ static const _ExtendedGDBusPropertyInfo _logind_session_property_info_idle_since
     NULL
   },
   "idle-since-hint",
-  FALSE
+  FALSE,
+  TRUE
 };
 
 static const _ExtendedGDBusPropertyInfo _logind_session_property_info_idle_since_hint_monotonic =
@@ -1257,7 +1371,8 @@ static const _ExtendedGDBusPropertyInfo _logind_session_property_info_idle_since
     NULL
   },
   "idle-since-hint-monotonic",
-  FALSE
+  FALSE,
+  TRUE
 };
 
 static const _ExtendedGDBusPropertyInfo _logind_session_property_info_locked_hint =
@@ -1270,36 +1385,37 @@ static const _ExtendedGDBusPropertyInfo _logind_session_property_info_locked_hin
     NULL
   },
   "locked-hint",
-  FALSE
+  FALSE,
+  TRUE
 };
 
-static const _ExtendedGDBusPropertyInfo * const _logind_session_property_info_pointers[] =
-{
-  &_logind_session_property_info_id,
-  &_logind_session_property_info_user,
-  &_logind_session_property_info_name,
-  &_logind_session_property_info_timestamp,
-  &_logind_session_property_info_timestamp_monotonic,
-  &_logind_session_property_info_vtnr,
-  &_logind_session_property_info_seat,
-  &_logind_session_property_info_tty,
-  &_logind_session_property_info_display,
-  &_logind_session_property_info_remote,
-  &_logind_session_property_info_remote_host,
-  &_logind_session_property_info_remote_user,
-  &_logind_session_property_info_service,
-  &_logind_session_property_info_desktop,
-  &_logind_session_property_info_scope,
-  &_logind_session_property_info_leader,
-  &_logind_session_property_info_audit,
-  &_logind_session_property_info_type_,
-  &_logind_session_property_info_class,
-  &_logind_session_property_info_active,
-  &_logind_session_property_info_state,
-  &_logind_session_property_info_idle_hint,
-  &_logind_session_property_info_idle_since_hint,
-  &_logind_session_property_info_idle_since_hint_monotonic,
-  &_logind_session_property_info_locked_hint,
+static const GDBusPropertyInfo * const _logind_session_property_info_pointers[] =
+{
+  &_logind_session_property_info_id.parent_struct,
+  &_logind_session_property_info_user.parent_struct,
+  &_logind_session_property_info_name.parent_struct,
+  &_logind_session_property_info_timestamp.parent_struct,
+  &_logind_session_property_info_timestamp_monotonic.parent_struct,
+  &_logind_session_property_info_vtnr.parent_struct,
+  &_logind_session_property_info_seat.parent_struct,
+  &_logind_session_property_info_tty.parent_struct,
+  &_logind_session_property_info_display.parent_struct,
+  &_logind_session_property_info_remote.parent_struct,
+  &_logind_session_property_info_remote_host.parent_struct,
+  &_logind_session_property_info_remote_user.parent_struct,
+  &_logind_session_property_info_service.parent_struct,
+  &_logind_session_property_info_desktop.parent_struct,
+  &_logind_session_property_info_scope.parent_struct,
+  &_logind_session_property_info_leader.parent_struct,
+  &_logind_session_property_info_audit.parent_struct,
+  &_logind_session_property_info_type_.parent_struct,
+  &_logind_session_property_info_class.parent_struct,
+  &_logind_session_property_info_active.parent_struct,
+  &_logind_session_property_info_state.parent_struct,
+  &_logind_session_property_info_idle_hint.parent_struct,
+  &_logind_session_property_info_idle_since_hint.parent_struct,
+  &_logind_session_property_info_idle_since_hint_monotonic.parent_struct,
+  &_logind_session_property_info_locked_hint.parent_struct,
   NULL
 };
 
@@ -1388,8 +1504,11 @@ logind_session_override_properties (GObjectClass *klass, guint property_id_begin
  * @handle_pause_device_complete: Handler for the #LogindSession::handle-pause-device-complete signal.
  * @handle_release_control: Handler for the #LogindSession::handle-release-control signal.
  * @handle_release_device: Handler for the #LogindSession::handle-release-device signal.
+ * @handle_set_brightness: Handler for the #LogindSession::handle-set-brightness signal.
+ * @handle_set_display: Handler for the #LogindSession::handle-set-display signal.
  * @handle_set_idle_hint: Handler for the #LogindSession::handle-set-idle-hint signal.
  * @handle_set_locked_hint: Handler for the #LogindSession::handle-set-locked-hint signal.
+ * @handle_set_type: Handler for the #LogindSession::handle-set-type signal.
  * @handle_take_control: Handler for the #LogindSession::handle-take-control signal.
  * @handle_take_device: Handler for the #LogindSession::handle-take-device signal.
  * @handle_terminate: Handler for the #LogindSession::handle-terminate signal.
@@ -1441,9 +1560,9 @@ logind_session_default_init (LogindSessionIface *iface)
    *
    * Signal emitted when a remote caller is invoking the <link linkend="gdbus-method-org-freedesktop-login1-Session.Terminate">Terminate()</link> D-Bus method.
    *
-   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call logind_session_complete_terminate() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
+   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call logind_session_complete_terminate() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
    *
-   * Returns: %TRUE if the invocation was handled, %FALSE to let other signal handlers run.
+   * Returns: %G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.
    */
   g_signal_new ("handle-terminate",
     G_TYPE_FROM_INTERFACE (iface),
@@ -1463,9 +1582,9 @@ logind_session_default_init (LogindSessionIface *iface)
    *
    * Signal emitted when a remote caller is invoking the <link linkend="gdbus-method-org-freedesktop-login1-Session.Activate">Activate()</link> D-Bus method.
    *
-   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call logind_session_complete_activate() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
+   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call logind_session_complete_activate() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
    *
-   * Returns: %TRUE if the invocation was handled, %FALSE to let other signal handlers run.
+   * Returns: %G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.
    */
   g_signal_new ("handle-activate",
     G_TYPE_FROM_INTERFACE (iface),
@@ -1485,9 +1604,9 @@ logind_session_default_init (LogindSessionIface *iface)
    *
    * Signal emitted when a remote caller is invoking the <link linkend="gdbus-method-org-freedesktop-login1-Session.Lock">Lock()</link> D-Bus method.
    *
-   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call logind_session_complete_lock() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
+   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call logind_session_complete_lock() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
    *
-   * Returns: %TRUE if the invocation was handled, %FALSE to let other signal handlers run.
+   * Returns: %G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.
    */
   g_signal_new ("handle-lock",
     G_TYPE_FROM_INTERFACE (iface),
@@ -1507,9 +1626,9 @@ logind_session_default_init (LogindSessionIface *iface)
    *
    * Signal emitted when a remote caller is invoking the <link linkend="gdbus-method-org-freedesktop-login1-Session.Unlock">Unlock()</link> D-Bus method.
    *
-   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call logind_session_complete_unlock() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
+   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call logind_session_complete_unlock() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
    *
-   * Returns: %TRUE if the invocation was handled, %FALSE to let other signal handlers run.
+   * Returns: %G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.
    */
   g_signal_new ("handle-unlock",
     G_TYPE_FROM_INTERFACE (iface),
@@ -1526,13 +1645,13 @@ logind_session_default_init (LogindSessionIface *iface)
    * LogindSession::handle-set-idle-hint:
    * @object: A #LogindSession.
    * @invocation: A #GDBusMethodInvocation.
-   * @arg_unnamed_arg0: Argument passed by remote caller.
+   * @arg_idle: Argument passed by remote caller.
    *
    * Signal emitted when a remote caller is invoking the <link linkend="gdbus-method-org-freedesktop-login1-Session.SetIdleHint">SetIdleHint()</link> D-Bus method.
    *
-   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call logind_session_complete_set_idle_hint() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
+   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call logind_session_complete_set_idle_hint() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
    *
-   * Returns: %TRUE if the invocation was handled, %FALSE to let other signal handlers run.
+   * Returns: %G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.
    */
   g_signal_new ("handle-set-idle-hint",
     G_TYPE_FROM_INTERFACE (iface),
@@ -1549,13 +1668,13 @@ logind_session_default_init (LogindSessionIface *iface)
    * LogindSession::handle-set-locked-hint:
    * @object: A #LogindSession.
    * @invocation: A #GDBusMethodInvocation.
-   * @arg_unnamed_arg0: Argument passed by remote caller.
+   * @arg_locked: Argument passed by remote caller.
    *
    * Signal emitted when a remote caller is invoking the <link linkend="gdbus-method-org-freedesktop-login1-Session.SetLockedHint">SetLockedHint()</link> D-Bus method.
    *
-   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call logind_session_complete_set_locked_hint() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
+   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call logind_session_complete_set_locked_hint() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
    *
-   * Returns: %TRUE if the invocation was handled, %FALSE to let other signal handlers run.
+   * Returns: %G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.
    */
   g_signal_new ("handle-set-locked-hint",
     G_TYPE_FROM_INTERFACE (iface),
@@ -1572,14 +1691,14 @@ logind_session_default_init (LogindSessionIface *iface)
    * LogindSession::handle-kill:
    * @object: A #LogindSession.
    * @invocation: A #GDBusMethodInvocation.
-   * @arg_unnamed_arg0: Argument passed by remote caller.
-   * @arg_unnamed_arg1: Argument passed by remote caller.
+   * @arg_who: Argument passed by remote caller.
+   * @arg_signal_number: Argument passed by remote caller.
    *
    * Signal emitted when a remote caller is invoking the <link linkend="gdbus-method-org-freedesktop-login1-Session.Kill">Kill()</link> D-Bus method.
    *
-   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call logind_session_complete_kill() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
+   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call logind_session_complete_kill() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
    *
-   * Returns: %TRUE if the invocation was handled, %FALSE to let other signal handlers run.
+   * Returns: %G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.
    */
   g_signal_new ("handle-kill",
     G_TYPE_FROM_INTERFACE (iface),
@@ -1596,13 +1715,13 @@ logind_session_default_init (LogindSessionIface *iface)
    * LogindSession::handle-take-control:
    * @object: A #LogindSession.
    * @invocation: A #GDBusMethodInvocation.
-   * @arg_unnamed_arg0: Argument passed by remote caller.
+   * @arg_force: Argument passed by remote caller.
    *
    * Signal emitted when a remote caller is invoking the <link linkend="gdbus-method-org-freedesktop-login1-Session.TakeControl">TakeControl()</link> D-Bus method.
    *
-   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call logind_session_complete_take_control() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
+   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call logind_session_complete_take_control() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
    *
-   * Returns: %TRUE if the invocation was handled, %FALSE to let other signal handlers run.
+   * Returns: %G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.
    */
   g_signal_new ("handle-take-control",
     G_TYPE_FROM_INTERFACE (iface),
@@ -1622,9 +1741,9 @@ logind_session_default_init (LogindSessionIface *iface)
    *
    * Signal emitted when a remote caller is invoking the <link linkend="gdbus-method-org-freedesktop-login1-Session.ReleaseControl">ReleaseControl()</link> D-Bus method.
    *
-   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call logind_session_complete_release_control() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
+   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call logind_session_complete_release_control() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
    *
-   * Returns: %TRUE if the invocation was handled, %FALSE to let other signal handlers run.
+   * Returns: %G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.
    */
   g_signal_new ("handle-release-control",
     G_TYPE_FROM_INTERFACE (iface),
@@ -1637,18 +1756,64 @@ logind_session_default_init (LogindSessionIface *iface)
     1,
     G_TYPE_DBUS_METHOD_INVOCATION);
 
+  /**
+   * LogindSession::handle-set-type:
+   * @object: A #LogindSession.
+   * @invocation: A #GDBusMethodInvocation.
+   * @arg_type: Argument passed by remote caller.
+   *
+   * Signal emitted when a remote caller is invoking the <link linkend="gdbus-method-org-freedesktop-login1-Session.SetType">SetType()</link> D-Bus method.
+   *
+   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call logind_session_complete_set_type() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
+   *
+   * Returns: %G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.
+   */
+  g_signal_new ("handle-set-type",
+    G_TYPE_FROM_INTERFACE (iface),
+    G_SIGNAL_RUN_LAST,
+    G_STRUCT_OFFSET (LogindSessionIface, handle_set_type),
+    g_signal_accumulator_true_handled,
+    NULL,
+    g_cclosure_marshal_generic,
+    G_TYPE_BOOLEAN,
+    2,
+    G_TYPE_DBUS_METHOD_INVOCATION, G_TYPE_STRING);
+
+  /**
+   * LogindSession::handle-set-display:
+   * @object: A #LogindSession.
+   * @invocation: A #GDBusMethodInvocation.
+   * @arg_display: Argument passed by remote caller.
+   *
+   * Signal emitted when a remote caller is invoking the <link linkend="gdbus-method-org-freedesktop-login1-Session.SetDisplay">SetDisplay()</link> D-Bus method.
+   *
+   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call logind_session_complete_set_display() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
+   *
+   * Returns: %G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.
+   */
+  g_signal_new ("handle-set-display",
+    G_TYPE_FROM_INTERFACE (iface),
+    G_SIGNAL_RUN_LAST,
+    G_STRUCT_OFFSET (LogindSessionIface, handle_set_display),
+    g_signal_accumulator_true_handled,
+    NULL,
+    g_cclosure_marshal_generic,
+    G_TYPE_BOOLEAN,
+    2,
+    G_TYPE_DBUS_METHOD_INVOCATION, G_TYPE_STRING);
+
   /**
    * LogindSession::handle-take-device:
    * @object: A #LogindSession.
    * @invocation: A #GDBusMethodInvocation.
-   * @arg_unnamed_arg0: Argument passed by remote caller.
-   * @arg_unnamed_arg1: Argument passed by remote caller.
+   * @arg_major: Argument passed by remote caller.
+   * @arg_minor: Argument passed by remote caller.
    *
    * Signal emitted when a remote caller is invoking the <link linkend="gdbus-method-org-freedesktop-login1-Session.TakeDevice">TakeDevice()</link> D-Bus method.
    *
-   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call logind_session_complete_take_device() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
+   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call logind_session_complete_take_device() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
    *
-   * Returns: %TRUE if the invocation was handled, %FALSE to let other signal handlers run.
+   * Returns: %G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.
    */
   g_signal_new ("handle-take-device",
     G_TYPE_FROM_INTERFACE (iface),
@@ -1665,14 +1830,14 @@ logind_session_default_init (LogindSessionIface *iface)
    * LogindSession::handle-release-device:
    * @object: A #LogindSession.
    * @invocation: A #GDBusMethodInvocation.
-   * @arg_unnamed_arg0: Argument passed by remote caller.
-   * @arg_unnamed_arg1: Argument passed by remote caller.
+   * @arg_major: Argument passed by remote caller.
+   * @arg_minor: Argument passed by remote caller.
    *
    * Signal emitted when a remote caller is invoking the <link linkend="gdbus-method-org-freedesktop-login1-Session.ReleaseDevice">ReleaseDevice()</link> D-Bus method.
    *
-   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call logind_session_complete_release_device() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
+   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call logind_session_complete_release_device() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
    *
-   * Returns: %TRUE if the invocation was handled, %FALSE to let other signal handlers run.
+   * Returns: %G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.
    */
   g_signal_new ("handle-release-device",
     G_TYPE_FROM_INTERFACE (iface),
@@ -1689,14 +1854,14 @@ logind_session_default_init (LogindSessionIface *iface)
    * LogindSession::handle-pause-device-complete:
    * @object: A #LogindSession.
    * @invocation: A #GDBusMethodInvocation.
-   * @arg_unnamed_arg0: Argument passed by remote caller.
-   * @arg_unnamed_arg1: Argument passed by remote caller.
+   * @arg_major: Argument passed by remote caller.
+   * @arg_minor: Argument passed by remote caller.
    *
    * Signal emitted when a remote caller is invoking the <link linkend="gdbus-method-org-freedesktop-login1-Session.PauseDeviceComplete">PauseDeviceComplete()</link> D-Bus method.
    *
-   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call logind_session_complete_pause_device_complete() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
+   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call logind_session_complete_pause_device_complete() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
    *
-   * Returns: %TRUE if the invocation was handled, %FALSE to let other signal handlers run.
+   * Returns: %G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.
    */
   g_signal_new ("handle-pause-device-complete",
     G_TYPE_FROM_INTERFACE (iface),
@@ -1709,13 +1874,38 @@ logind_session_default_init (LogindSessionIface *iface)
     3,
     G_TYPE_DBUS_METHOD_INVOCATION, G_TYPE_UINT, G_TYPE_UINT);
 
+  /**
+   * LogindSession::handle-set-brightness:
+   * @object: A #LogindSession.
+   * @invocation: A #GDBusMethodInvocation.
+   * @arg_subsystem: Argument passed by remote caller.
+   * @arg_name: Argument passed by remote caller.
+   * @arg_brightness: Argument passed by remote caller.
+   *
+   * Signal emitted when a remote caller is invoking the <link linkend="gdbus-method-org-freedesktop-login1-Session.SetBrightness">SetBrightness()</link> D-Bus method.
+   *
+   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call logind_session_complete_set_brightness() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
+   *
+   * Returns: %G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.
+   */
+  g_signal_new ("handle-set-brightness",
+    G_TYPE_FROM_INTERFACE (iface),
+    G_SIGNAL_RUN_LAST,
+    G_STRUCT_OFFSET (LogindSessionIface, handle_set_brightness),
+    g_signal_accumulator_true_handled,
+    NULL,
+    g_cclosure_marshal_generic,
+    G_TYPE_BOOLEAN,
+    4,
+    G_TYPE_DBUS_METHOD_INVOCATION, G_TYPE_STRING, G_TYPE_STRING, G_TYPE_UINT);
+
   /* GObject signals for received D-Bus signals: */
   /**
    * LogindSession::pause-device:
    * @object: A #LogindSession.
-   * @arg_unnamed_arg0: Argument.
-   * @arg_unnamed_arg1: Argument.
-   * @arg_unnamed_arg2: Argument.
+   * @arg_major: Argument.
+   * @arg_minor: Argument.
+   * @arg_type: Argument.
    *
    * On the client-side, this signal is emitted whenever the D-Bus signal <link linkend="gdbus-signal-org-freedesktop-login1-Session.PauseDevice">"PauseDevice"</link> is received.
    *
@@ -1734,9 +1924,9 @@ logind_session_default_init (LogindSessionIface *iface)
   /**
    * LogindSession::resume-device:
    * @object: A #LogindSession.
-   * @arg_unnamed_arg0: Argument.
-   * @arg_unnamed_arg1: Argument.
-   * @arg_unnamed_arg2: Argument.
+   * @arg_major: Argument.
+   * @arg_minor: Argument.
+   * @arg_fd: Argument.
    *
    * On the client-side, this signal is emitted whenever the D-Bus signal <link linkend="gdbus-signal-org-freedesktop-login1-Session.ResumeDevice">"ResumeDevice"</link> is received.
    *
@@ -2024,9 +2214,9 @@ logind_session_default_init (LogindSessionIface *iface)
  *
  * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
  *
- * <warning>The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use logind_session_dup_id() if on another thread.</warning>
+ * The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use logind_session_dup_id() if on another thread.
  *
- * Returns: (transfer none): The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.
+ * Returns: (transfer none) (nullable): The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.
  */
 const gchar *
 logind_session_get_id (LogindSession *object)
@@ -2042,7 +2232,7 @@ logind_session_get_id (LogindSession *object)
  *
  * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
  *
- * Returns: (transfer full): The property value or %NULL if the property is not set. The returned value should be freed with g_free().
+ * Returns: (transfer full) (nullable): The property value or %NULL if the property is not set. The returned value should be freed with g_free().
  */
 gchar *
 logind_session_dup_id (LogindSession *object)
@@ -2075,9 +2265,9 @@ logind_session_set_id (LogindSession *object, const gchar *value)
  *
  * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
  *
- * <warning>The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use logind_session_dup_user() if on another thread.</warning>
+ * The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use logind_session_dup_user() if on another thread.
  *
- * Returns: (transfer none): The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.
+ * Returns: (transfer none) (nullable): The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.
  */
 GVariant *
 logind_session_get_user (LogindSession *object)
@@ -2093,7 +2283,7 @@ logind_session_get_user (LogindSession *object)
  *
  * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
  *
- * Returns: (transfer full): The property value or %NULL if the property is not set. The returned value should be freed with g_variant_unref().
+ * Returns: (transfer full) (nullable): The property value or %NULL if the property is not set. The returned value should be freed with g_variant_unref().
  */
 GVariant *
 logind_session_dup_user (LogindSession *object)
@@ -2126,9 +2316,9 @@ logind_session_set_user (LogindSession *object, GVariant *value)
  *
  * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
  *
- * <warning>The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use logind_session_dup_name() if on another thread.</warning>
+ * The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use logind_session_dup_name() if on another thread.
  *
- * Returns: (transfer none): The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.
+ * Returns: (transfer none) (nullable): The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.
  */
 const gchar *
 logind_session_get_name (LogindSession *object)
@@ -2144,7 +2334,7 @@ logind_session_get_name (LogindSession *object)
  *
  * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
  *
- * Returns: (transfer full): The property value or %NULL if the property is not set. The returned value should be freed with g_free().
+ * Returns: (transfer full) (nullable): The property value or %NULL if the property is not set. The returned value should be freed with g_free().
  */
 gchar *
 logind_session_dup_name (LogindSession *object)
@@ -2270,9 +2460,9 @@ logind_session_set_vtnr (LogindSession *object, guint value)
  *
  * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
  *
- * <warning>The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use logind_session_dup_seat() if on another thread.</warning>
+ * The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use logind_session_dup_seat() if on another thread.
  *
- * Returns: (transfer none): The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.
+ * Returns: (transfer none) (nullable): The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.
  */
 GVariant *
 logind_session_get_seat (LogindSession *object)
@@ -2288,7 +2478,7 @@ logind_session_get_seat (LogindSession *object)
  *
  * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
  *
- * Returns: (transfer full): The property value or %NULL if the property is not set. The returned value should be freed with g_variant_unref().
+ * Returns: (transfer full) (nullable): The property value or %NULL if the property is not set. The returned value should be freed with g_variant_unref().
  */
 GVariant *
 logind_session_dup_seat (LogindSession *object)
@@ -2321,9 +2511,9 @@ logind_session_set_seat (LogindSession *object, GVariant *value)
  *
  * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
  *
- * <warning>The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use logind_session_dup_tty() if on another thread.</warning>
+ * The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use logind_session_dup_tty() if on another thread.
  *
- * Returns: (transfer none): The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.
+ * Returns: (transfer none) (nullable): The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.
  */
 const gchar *
 logind_session_get_tty (LogindSession *object)
@@ -2339,7 +2529,7 @@ logind_session_get_tty (LogindSession *object)
  *
  * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
  *
- * Returns: (transfer full): The property value or %NULL if the property is not set. The returned value should be freed with g_free().
+ * Returns: (transfer full) (nullable): The property value or %NULL if the property is not set. The returned value should be freed with g_free().
  */
 gchar *
 logind_session_dup_tty (LogindSession *object)
@@ -2372,9 +2562,9 @@ logind_session_set_tty (LogindSession *object, const gchar *value)
  *
  * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
  *
- * <warning>The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use logind_session_dup_display() if on another thread.</warning>
+ * The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use logind_session_dup_display() if on another thread.
  *
- * Returns: (transfer none): The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.
+ * Returns: (transfer none) (nullable): The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.
  */
 const gchar *
 logind_session_get_display (LogindSession *object)
@@ -2390,7 +2580,7 @@ logind_session_get_display (LogindSession *object)
  *
  * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
  *
- * Returns: (transfer full): The property value or %NULL if the property is not set. The returned value should be freed with g_free().
+ * Returns: (transfer full) (nullable): The property value or %NULL if the property is not set. The returned value should be freed with g_free().
  */
 gchar *
 logind_session_dup_display (LogindSession *object)
@@ -2454,9 +2644,9 @@ logind_session_set_remote (LogindSession *object, gboolean value)
  *
  * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
  *
- * <warning>The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use logind_session_dup_remote_host() if on another thread.</warning>
+ * The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use logind_session_dup_remote_host() if on another thread.
  *
- * Returns: (transfer none): The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.
+ * Returns: (transfer none) (nullable): The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.
  */
 const gchar *
 logind_session_get_remote_host (LogindSession *object)
@@ -2472,7 +2662,7 @@ logind_session_get_remote_host (LogindSession *object)
  *
  * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
  *
- * Returns: (transfer full): The property value or %NULL if the property is not set. The returned value should be freed with g_free().
+ * Returns: (transfer full) (nullable): The property value or %NULL if the property is not set. The returned value should be freed with g_free().
  */
 gchar *
 logind_session_dup_remote_host (LogindSession *object)
@@ -2505,9 +2695,9 @@ logind_session_set_remote_host (LogindSession *object, const gchar *value)
  *
  * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
  *
- * <warning>The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use logind_session_dup_remote_user() if on another thread.</warning>
+ * The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use logind_session_dup_remote_user() if on another thread.
  *
- * Returns: (transfer none): The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.
+ * Returns: (transfer none) (nullable): The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.
  */
 const gchar *
 logind_session_get_remote_user (LogindSession *object)
@@ -2523,7 +2713,7 @@ logind_session_get_remote_user (LogindSession *object)
  *
  * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
  *
- * Returns: (transfer full): The property value or %NULL if the property is not set. The returned value should be freed with g_free().
+ * Returns: (transfer full) (nullable): The property value or %NULL if the property is not set. The returned value should be freed with g_free().
  */
 gchar *
 logind_session_dup_remote_user (LogindSession *object)
@@ -2556,9 +2746,9 @@ logind_session_set_remote_user (LogindSession *object, const gchar *value)
  *
  * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
  *
- * <warning>The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use logind_session_dup_service() if on another thread.</warning>
+ * The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use logind_session_dup_service() if on another thread.
  *
- * Returns: (transfer none): The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.
+ * Returns: (transfer none) (nullable): The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.
  */
 const gchar *
 logind_session_get_service (LogindSession *object)
@@ -2574,7 +2764,7 @@ logind_session_get_service (LogindSession *object)
  *
  * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
  *
- * Returns: (transfer full): The property value or %NULL if the property is not set. The returned value should be freed with g_free().
+ * Returns: (transfer full) (nullable): The property value or %NULL if the property is not set. The returned value should be freed with g_free().
  */
 gchar *
 logind_session_dup_service (LogindSession *object)
@@ -2607,9 +2797,9 @@ logind_session_set_service (LogindSession *object, const gchar *value)
  *
  * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
  *
- * <warning>The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use logind_session_dup_desktop() if on another thread.</warning>
+ * The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use logind_session_dup_desktop() if on another thread.
  *
- * Returns: (transfer none): The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.
+ * Returns: (transfer none) (nullable): The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.
  */
 const gchar *
 logind_session_get_desktop (LogindSession *object)
@@ -2625,7 +2815,7 @@ logind_session_get_desktop (LogindSession *object)
  *
  * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
  *
- * Returns: (transfer full): The property value or %NULL if the property is not set. The returned value should be freed with g_free().
+ * Returns: (transfer full) (nullable): The property value or %NULL if the property is not set. The returned value should be freed with g_free().
  */
 gchar *
 logind_session_dup_desktop (LogindSession *object)
@@ -2658,9 +2848,9 @@ logind_session_set_desktop (LogindSession *object, const gchar *value)
  *
  * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
  *
- * <warning>The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use logind_session_dup_scope() if on another thread.</warning>
+ * The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use logind_session_dup_scope() if on another thread.
  *
- * Returns: (transfer none): The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.
+ * Returns: (transfer none) (nullable): The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.
  */
 const gchar *
 logind_session_get_scope (LogindSession *object)
@@ -2676,7 +2866,7 @@ logind_session_get_scope (LogindSession *object)
  *
  * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
  *
- * Returns: (transfer full): The property value or %NULL if the property is not set. The returned value should be freed with g_free().
+ * Returns: (transfer full) (nullable): The property value or %NULL if the property is not set. The returned value should be freed with g_free().
  */
 gchar *
 logind_session_dup_scope (LogindSession *object)
@@ -2771,9 +2961,9 @@ logind_session_set_audit (LogindSession *object, guint value)
  *
  * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
  *
- * <warning>The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use logind_session_dup_type_() if on another thread.</warning>
+ * The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use logind_session_dup_type_() if on another thread.
  *
- * Returns: (transfer none): The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.
+ * Returns: (transfer none) (nullable): The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.
  */
 const gchar *
 logind_session_get_type_ (LogindSession *object)
@@ -2789,7 +2979,7 @@ logind_session_get_type_ (LogindSession *object)
  *
  * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
  *
- * Returns: (transfer full): The property value or %NULL if the property is not set. The returned value should be freed with g_free().
+ * Returns: (transfer full) (nullable): The property value or %NULL if the property is not set. The returned value should be freed with g_free().
  */
 gchar *
 logind_session_dup_type_ (LogindSession *object)
@@ -2822,9 +3012,9 @@ logind_session_set_type_ (LogindSession *object, const gchar *value)
  *
  * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
  *
- * <warning>The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use logind_session_dup_class() if on another thread.</warning>
+ * The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use logind_session_dup_class() if on another thread.
  *
- * Returns: (transfer none): The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.
+ * Returns: (transfer none) (nullable): The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.
  */
 const gchar *
 logind_session_get_class (LogindSession *object)
@@ -2840,7 +3030,7 @@ logind_session_get_class (LogindSession *object)
  *
  * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
  *
- * Returns: (transfer full): The property value or %NULL if the property is not set. The returned value should be freed with g_free().
+ * Returns: (transfer full) (nullable): The property value or %NULL if the property is not set. The returned value should be freed with g_free().
  */
 gchar *
 logind_session_dup_class (LogindSession *object)
@@ -2904,9 +3094,9 @@ logind_session_set_active (LogindSession *object, gboolean value)
  *
  * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
  *
- * <warning>The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use logind_session_dup_state() if on another thread.</warning>
+ * The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use logind_session_dup_state() if on another thread.
  *
- * Returns: (transfer none): The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.
+ * Returns: (transfer none) (nullable): The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.
  */
 const gchar *
 logind_session_get_state (LogindSession *object)
@@ -2922,7 +3112,7 @@ logind_session_get_state (LogindSession *object)
  *
  * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
  *
- * Returns: (transfer full): The property value or %NULL if the property is not set. The returned value should be freed with g_free().
+ * Returns: (transfer full) (nullable): The property value or %NULL if the property is not set. The returned value should be freed with g_free().
  */
 gchar *
 logind_session_dup_state (LogindSession *object)
@@ -3074,39 +3264,39 @@ logind_session_set_locked_hint (LogindSession *object, gboolean value)
 /**
  * logind_session_emit_pause_device:
  * @object: A #LogindSession.
- * @arg_unnamed_arg0: Argument to pass with the signal.
- * @arg_unnamed_arg1: Argument to pass with the signal.
- * @arg_unnamed_arg2: Argument to pass with the signal.
+ * @arg_major: Argument to pass with the signal.
+ * @arg_minor: Argument to pass with the signal.
+ * @arg_type: Argument to pass with the signal.
  *
  * Emits the <link linkend="gdbus-signal-org-freedesktop-login1-Session.PauseDevice">"PauseDevice"</link> D-Bus signal.
  */
 void
 logind_session_emit_pause_device (
     LogindSession *object,
-    guint arg_unnamed_arg0,
-    guint arg_unnamed_arg1,
-    const gchar *arg_unnamed_arg2)
+    guint arg_major,
+    guint arg_minor,
+    const gchar *arg_type)
 {
-  g_signal_emit_by_name (object, "pause-device", arg_unnamed_arg0, arg_unnamed_arg1, arg_unnamed_arg2);
+  g_signal_emit_by_name (object, "pause-device", arg_major, arg_minor, arg_type);
 }
 
 /**
  * logind_session_emit_resume_device:
  * @object: A #LogindSession.
- * @arg_unnamed_arg0: Argument to pass with the signal.
- * @arg_unnamed_arg1: Argument to pass with the signal.
- * @arg_unnamed_arg2: Argument to pass with the signal.
+ * @arg_major: Argument to pass with the signal.
+ * @arg_minor: Argument to pass with the signal.
+ * @arg_fd: Argument to pass with the signal.
  *
  * Emits the <link linkend="gdbus-signal-org-freedesktop-login1-Session.ResumeDevice">"ResumeDevice"</link> D-Bus signal.
  */
 void
 logind_session_emit_resume_device (
     LogindSession *object,
-    guint arg_unnamed_arg0,
-    guint arg_unnamed_arg1,
-    GVariant *arg_unnamed_arg2)
+    guint arg_major,
+    guint arg_minor,
+    GVariant *arg_fd)
 {
-  g_signal_emit_by_name (object, "resume-device", arg_unnamed_arg0, arg_unnamed_arg1, arg_unnamed_arg2);
+  g_signal_emit_by_name (object, "resume-device", arg_major, arg_minor, arg_fd);
 }
 
 /**
@@ -3143,7 +3333,7 @@ logind_session_emit_unlock (
  * @user_data: User data to pass to @callback.
  *
  * Asynchronously invokes the <link linkend="gdbus-method-org-freedesktop-login1-Session.Terminate">Terminate()</link> D-Bus method on @proxy.
- * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
+ * When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
  * You can then call logind_session_call_terminate_finish() to get the result of the operation.
  *
  * See logind_session_call_terminate_sync() for the synchronous, blocking version of this method.
@@ -3173,7 +3363,7 @@ logind_session_call_terminate (
  *
  * Finishes an operation started with logind_session_call_terminate().
  *
- * Returns: (skip): %TRUE if the call succeded, %FALSE if @error is set.
+ * Returns: (skip): %TRUE if the call succeeded, %FALSE if @error is set.
  */
 gboolean
 logind_session_call_terminate_finish (
@@ -3202,7 +3392,7 @@ _out:
  *
  * See logind_session_call_terminate() for the asynchronous version of this method.
  *
- * Returns: (skip): %TRUE if the call succeded, %FALSE if @error is set.
+ * Returns: (skip): %TRUE if the call succeeded, %FALSE if @error is set.
  */
 gboolean
 logind_session_call_terminate_sync (
@@ -3235,7 +3425,7 @@ _out:
  * @user_data: User data to pass to @callback.
  *
  * Asynchronously invokes the <link linkend="gdbus-method-org-freedesktop-login1-Session.Activate">Activate()</link> D-Bus method on @proxy.
- * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
+ * When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
  * You can then call logind_session_call_activate_finish() to get the result of the operation.
  *
  * See logind_session_call_activate_sync() for the synchronous, blocking version of this method.
@@ -3265,7 +3455,7 @@ logind_session_call_activate (
  *
  * Finishes an operation started with logind_session_call_activate().
  *
- * Returns: (skip): %TRUE if the call succeded, %FALSE if @error is set.
+ * Returns: (skip): %TRUE if the call succeeded, %FALSE if @error is set.
  */
 gboolean
 logind_session_call_activate_finish (
@@ -3294,7 +3484,7 @@ _out:
  *
  * See logind_session_call_activate() for the asynchronous version of this method.
  *
- * Returns: (skip): %TRUE if the call succeded, %FALSE if @error is set.
+ * Returns: (skip): %TRUE if the call succeeded, %FALSE if @error is set.
  */
 gboolean
 logind_session_call_activate_sync (
@@ -3327,7 +3517,7 @@ _out:
  * @user_data: User data to pass to @callback.
  *
  * Asynchronously invokes the <link linkend="gdbus-method-org-freedesktop-login1-Session.Lock">Lock()</link> D-Bus method on @proxy.
- * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
+ * When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
  * You can then call logind_session_call_lock_finish() to get the result of the operation.
  *
  * See logind_session_call_lock_sync() for the synchronous, blocking version of this method.
@@ -3357,7 +3547,7 @@ logind_session_call_lock (
  *
  * Finishes an operation started with logind_session_call_lock().
  *
- * Returns: (skip): %TRUE if the call succeded, %FALSE if @error is set.
+ * Returns: (skip): %TRUE if the call succeeded, %FALSE if @error is set.
  */
 gboolean
 logind_session_call_lock_finish (
@@ -3386,7 +3576,7 @@ _out:
  *
  * See logind_session_call_lock() for the asynchronous version of this method.
  *
- * Returns: (skip): %TRUE if the call succeded, %FALSE if @error is set.
+ * Returns: (skip): %TRUE if the call succeeded, %FALSE if @error is set.
  */
 gboolean
 logind_session_call_lock_sync (
@@ -3419,7 +3609,7 @@ _out:
  * @user_data: User data to pass to @callback.
  *
  * Asynchronously invokes the <link linkend="gdbus-method-org-freedesktop-login1-Session.Unlock">Unlock()</link> D-Bus method on @proxy.
- * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
+ * When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
  * You can then call logind_session_call_unlock_finish() to get the result of the operation.
  *
  * See logind_session_call_unlock_sync() for the synchronous, blocking version of this method.
@@ -3449,7 +3639,7 @@ logind_session_call_unlock (
  *
  * Finishes an operation started with logind_session_call_unlock().
  *
- * Returns: (skip): %TRUE if the call succeded, %FALSE if @error is set.
+ * Returns: (skip): %TRUE if the call succeeded, %FALSE if @error is set.
  */
 gboolean
 logind_session_call_unlock_finish (
@@ -3478,7 +3668,7 @@ _out:
  *
  * See logind_session_call_unlock() for the asynchronous version of this method.
  *
- * Returns: (skip): %TRUE if the call succeded, %FALSE if @error is set.
+ * Returns: (skip): %TRUE if the call succeeded, %FALSE if @error is set.
  */
 gboolean
 logind_session_call_unlock_sync (
@@ -3506,13 +3696,13 @@ _out:
 /**
  * logind_session_call_set_idle_hint:
  * @proxy: A #LogindSessionProxy.
- * @arg_unnamed_arg0: Argument to pass with the method invocation.
+ * @arg_idle: Argument to pass with the method invocation.
  * @cancellable: (nullable): A #GCancellable or %NULL.
  * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL.
  * @user_data: User data to pass to @callback.
  *
  * Asynchronously invokes the <link linkend="gdbus-method-org-freedesktop-login1-Session.SetIdleHint">SetIdleHint()</link> D-Bus method on @proxy.
- * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
+ * When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
  * You can then call logind_session_call_set_idle_hint_finish() to get the result of the operation.
  *
  * See logind_session_call_set_idle_hint_sync() for the synchronous, blocking version of this method.
@@ -3520,7 +3710,7 @@ _out:
 void
 logind_session_call_set_idle_hint (
     LogindSession *proxy,
-    gboolean arg_unnamed_arg0,
+    gboolean arg_idle,
     GCancellable *cancellable,
     GAsyncReadyCallback callback,
     gpointer user_data)
@@ -3528,7 +3718,7 @@ logind_session_call_set_idle_hint (
   g_dbus_proxy_call (G_DBUS_PROXY (proxy),
     "SetIdleHint",
     g_variant_new ("(b)",
-                   arg_unnamed_arg0),
+                   arg_idle),
     G_DBUS_CALL_FLAGS_NONE,
     -1,
     cancellable,
@@ -3544,7 +3734,7 @@ logind_session_call_set_idle_hint (
  *
  * Finishes an operation started with logind_session_call_set_idle_hint().
  *
- * Returns: (skip): %TRUE if the call succeded, %FALSE if @error is set.
+ * Returns: (skip): %TRUE if the call succeeded, %FALSE if @error is set.
  */
 gboolean
 logind_session_call_set_idle_hint_finish (
@@ -3566,7 +3756,7 @@ _out:
 /**
  * logind_session_call_set_idle_hint_sync:
  * @proxy: A #LogindSessionProxy.
- * @arg_unnamed_arg0: Argument to pass with the method invocation.
+ * @arg_idle: Argument to pass with the method invocation.
  * @cancellable: (nullable): A #GCancellable or %NULL.
  * @error: Return location for error or %NULL.
  *
@@ -3574,12 +3764,12 @@ _out:
  *
  * See logind_session_call_set_idle_hint() for the asynchronous version of this method.
  *
- * Returns: (skip): %TRUE if the call succeded, %FALSE if @error is set.
+ * Returns: (skip): %TRUE if the call succeeded, %FALSE if @error is set.
  */
 gboolean
 logind_session_call_set_idle_hint_sync (
     LogindSession *proxy,
-    gboolean arg_unnamed_arg0,
+    gboolean arg_idle,
     GCancellable *cancellable,
     GError **error)
 {
@@ -3587,7 +3777,7 @@ logind_session_call_set_idle_hint_sync (
   _ret = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
     "SetIdleHint",
     g_variant_new ("(b)",
-                   arg_unnamed_arg0),
+                   arg_idle),
     G_DBUS_CALL_FLAGS_NONE,
     -1,
     cancellable,
@@ -3604,13 +3794,13 @@ _out:
 /**
  * logind_session_call_set_locked_hint:
  * @proxy: A #LogindSessionProxy.
- * @arg_unnamed_arg0: Argument to pass with the method invocation.
+ * @arg_locked: Argument to pass with the method invocation.
  * @cancellable: (nullable): A #GCancellable or %NULL.
  * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL.
  * @user_data: User data to pass to @callback.
  *
  * Asynchronously invokes the <link linkend="gdbus-method-org-freedesktop-login1-Session.SetLockedHint">SetLockedHint()</link> D-Bus method on @proxy.
- * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
+ * When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
  * You can then call logind_session_call_set_locked_hint_finish() to get the result of the operation.
  *
  * See logind_session_call_set_locked_hint_sync() for the synchronous, blocking version of this method.
@@ -3618,7 +3808,7 @@ _out:
 void
 logind_session_call_set_locked_hint (
     LogindSession *proxy,
-    gboolean arg_unnamed_arg0,
+    gboolean arg_locked,
     GCancellable *cancellable,
     GAsyncReadyCallback callback,
     gpointer user_data)
@@ -3626,7 +3816,7 @@ logind_session_call_set_locked_hint (
   g_dbus_proxy_call (G_DBUS_PROXY (proxy),
     "SetLockedHint",
     g_variant_new ("(b)",
-                   arg_unnamed_arg0),
+                   arg_locked),
     G_DBUS_CALL_FLAGS_NONE,
     -1,
     cancellable,
@@ -3642,7 +3832,7 @@ logind_session_call_set_locked_hint (
  *
  * Finishes an operation started with logind_session_call_set_locked_hint().
  *
- * Returns: (skip): %TRUE if the call succeded, %FALSE if @error is set.
+ * Returns: (skip): %TRUE if the call succeeded, %FALSE if @error is set.
  */
 gboolean
 logind_session_call_set_locked_hint_finish (
@@ -3664,7 +3854,7 @@ _out:
 /**
  * logind_session_call_set_locked_hint_sync:
  * @proxy: A #LogindSessionProxy.
- * @arg_unnamed_arg0: Argument to pass with the method invocation.
+ * @arg_locked: Argument to pass with the method invocation.
  * @cancellable: (nullable): A #GCancellable or %NULL.
  * @error: Return location for error or %NULL.
  *
@@ -3672,12 +3862,12 @@ _out:
  *
  * See logind_session_call_set_locked_hint() for the asynchronous version of this method.
  *
- * Returns: (skip): %TRUE if the call succeded, %FALSE if @error is set.
+ * Returns: (skip): %TRUE if the call succeeded, %FALSE if @error is set.
  */
 gboolean
 logind_session_call_set_locked_hint_sync (
     LogindSession *proxy,
-    gboolean arg_unnamed_arg0,
+    gboolean arg_locked,
     GCancellable *cancellable,
     GError **error)
 {
@@ -3685,7 +3875,7 @@ logind_session_call_set_locked_hint_sync (
   _ret = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
     "SetLockedHint",
     g_variant_new ("(b)",
-                   arg_unnamed_arg0),
+                   arg_locked),
     G_DBUS_CALL_FLAGS_NONE,
     -1,
     cancellable,
@@ -3702,14 +3892,14 @@ _out:
 /**
  * logind_session_call_kill:
  * @proxy: A #LogindSessionProxy.
- * @arg_unnamed_arg0: Argument to pass with the method invocation.
- * @arg_unnamed_arg1: Argument to pass with the method invocation.
+ * @arg_who: Argument to pass with the method invocation.
+ * @arg_signal_number: Argument to pass with the method invocation.
  * @cancellable: (nullable): A #GCancellable or %NULL.
  * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL.
  * @user_data: User data to pass to @callback.
  *
  * Asynchronously invokes the <link linkend="gdbus-method-org-freedesktop-login1-Session.Kill">Kill()</link> D-Bus method on @proxy.
- * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
+ * When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
  * You can then call logind_session_call_kill_finish() to get the result of the operation.
  *
  * See logind_session_call_kill_sync() for the synchronous, blocking version of this method.
@@ -3717,8 +3907,8 @@ _out:
 void
 logind_session_call_kill (
     LogindSession *proxy,
-    const gchar *arg_unnamed_arg0,
-    gint arg_unnamed_arg1,
+    const gchar *arg_who,
+    gint arg_signal_number,
     GCancellable *cancellable,
     GAsyncReadyCallback callback,
     gpointer user_data)
@@ -3726,8 +3916,8 @@ logind_session_call_kill (
   g_dbus_proxy_call (G_DBUS_PROXY (proxy),
     "Kill",
     g_variant_new ("(si)",
-                   arg_unnamed_arg0,
-                   arg_unnamed_arg1),
+                   arg_who,
+                   arg_signal_number),
     G_DBUS_CALL_FLAGS_NONE,
     -1,
     cancellable,
@@ -3743,7 +3933,7 @@ logind_session_call_kill (
  *
  * Finishes an operation started with logind_session_call_kill().
  *
- * Returns: (skip): %TRUE if the call succeded, %FALSE if @error is set.
+ * Returns: (skip): %TRUE if the call succeeded, %FALSE if @error is set.
  */
 gboolean
 logind_session_call_kill_finish (
@@ -3765,8 +3955,8 @@ _out:
 /**
  * logind_session_call_kill_sync:
  * @proxy: A #LogindSessionProxy.
- * @arg_unnamed_arg0: Argument to pass with the method invocation.
- * @arg_unnamed_arg1: Argument to pass with the method invocation.
+ * @arg_who: Argument to pass with the method invocation.
+ * @arg_signal_number: Argument to pass with the method invocation.
  * @cancellable: (nullable): A #GCancellable or %NULL.
  * @error: Return location for error or %NULL.
  *
@@ -3774,13 +3964,13 @@ _out:
  *
  * See logind_session_call_kill() for the asynchronous version of this method.
  *
- * Returns: (skip): %TRUE if the call succeded, %FALSE if @error is set.
+ * Returns: (skip): %TRUE if the call succeeded, %FALSE if @error is set.
  */
 gboolean
 logind_session_call_kill_sync (
     LogindSession *proxy,
-    const gchar *arg_unnamed_arg0,
-    gint arg_unnamed_arg1,
+    const gchar *arg_who,
+    gint arg_signal_number,
     GCancellable *cancellable,
     GError **error)
 {
@@ -3788,8 +3978,8 @@ logind_session_call_kill_sync (
   _ret = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
     "Kill",
     g_variant_new ("(si)",
-                   arg_unnamed_arg0,
-                   arg_unnamed_arg1),
+                   arg_who,
+                   arg_signal_number),
     G_DBUS_CALL_FLAGS_NONE,
     -1,
     cancellable,
@@ -3806,13 +3996,13 @@ _out:
 /**
  * logind_session_call_take_control:
  * @proxy: A #LogindSessionProxy.
- * @arg_unnamed_arg0: Argument to pass with the method invocation.
+ * @arg_force: Argument to pass with the method invocation.
  * @cancellable: (nullable): A #GCancellable or %NULL.
  * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL.
  * @user_data: User data to pass to @callback.
  *
  * Asynchronously invokes the <link linkend="gdbus-method-org-freedesktop-login1-Session.TakeControl">TakeControl()</link> D-Bus method on @proxy.
- * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
+ * When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
  * You can then call logind_session_call_take_control_finish() to get the result of the operation.
  *
  * See logind_session_call_take_control_sync() for the synchronous, blocking version of this method.
@@ -3820,7 +4010,7 @@ _out:
 void
 logind_session_call_take_control (
     LogindSession *proxy,
-    gboolean arg_unnamed_arg0,
+    gboolean arg_force,
     GCancellable *cancellable,
     GAsyncReadyCallback callback,
     gpointer user_data)
@@ -3828,7 +4018,7 @@ logind_session_call_take_control (
   g_dbus_proxy_call (G_DBUS_PROXY (proxy),
     "TakeControl",
     g_variant_new ("(b)",
-                   arg_unnamed_arg0),
+                   arg_force),
     G_DBUS_CALL_FLAGS_NONE,
     -1,
     cancellable,
@@ -3844,7 +4034,7 @@ logind_session_call_take_control (
  *
  * Finishes an operation started with logind_session_call_take_control().
  *
- * Returns: (skip): %TRUE if the call succeded, %FALSE if @error is set.
+ * Returns: (skip): %TRUE if the call succeeded, %FALSE if @error is set.
  */
 gboolean
 logind_session_call_take_control_finish (
@@ -3866,7 +4056,7 @@ _out:
 /**
  * logind_session_call_take_control_sync:
  * @proxy: A #LogindSessionProxy.
- * @arg_unnamed_arg0: Argument to pass with the method invocation.
+ * @arg_force: Argument to pass with the method invocation.
  * @cancellable: (nullable): A #GCancellable or %NULL.
  * @error: Return location for error or %NULL.
  *
@@ -3874,12 +4064,12 @@ _out:
  *
  * See logind_session_call_take_control() for the asynchronous version of this method.
  *
- * Returns: (skip): %TRUE if the call succeded, %FALSE if @error is set.
+ * Returns: (skip): %TRUE if the call succeeded, %FALSE if @error is set.
  */
 gboolean
 logind_session_call_take_control_sync (
     LogindSession *proxy,
-    gboolean arg_unnamed_arg0,
+    gboolean arg_force,
     GCancellable *cancellable,
     GError **error)
 {
@@ -3887,7 +4077,7 @@ logind_session_call_take_control_sync (
   _ret = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
     "TakeControl",
     g_variant_new ("(b)",
-                   arg_unnamed_arg0),
+                   arg_force),
     G_DBUS_CALL_FLAGS_NONE,
     -1,
     cancellable,
@@ -3909,7 +4099,7 @@ _out:
  * @user_data: User data to pass to @callback.
  *
  * Asynchronously invokes the <link linkend="gdbus-method-org-freedesktop-login1-Session.ReleaseControl">ReleaseControl()</link> D-Bus method on @proxy.
- * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
+ * When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
  * You can then call logind_session_call_release_control_finish() to get the result of the operation.
  *
  * See logind_session_call_release_control_sync() for the synchronous, blocking version of this method.
@@ -3939,7 +4129,7 @@ logind_session_call_release_control (
  *
  * Finishes an operation started with logind_session_call_release_control().
  *
- * Returns: (skip): %TRUE if the call succeded, %FALSE if @error is set.
+ * Returns: (skip): %TRUE if the call succeeded, %FALSE if @error is set.
  */
 gboolean
 logind_session_call_release_control_finish (
@@ -3968,7 +4158,7 @@ _out:
  *
  * See logind_session_call_release_control() for the asynchronous version of this method.
  *
- * Returns: (skip): %TRUE if the call succeded, %FALSE if @error is set.
+ * Returns: (skip): %TRUE if the call succeeded, %FALSE if @error is set.
  */
 gboolean
 logind_session_call_release_control_sync (
@@ -3993,17 +4183,213 @@ _out:
   return _ret != NULL;
 }
 
+/**
+ * logind_session_call_set_type:
+ * @proxy: A #LogindSessionProxy.
+ * @arg_type: Argument to pass with the method invocation.
+ * @cancellable: (nullable): A #GCancellable or %NULL.
+ * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL.
+ * @user_data: User data to pass to @callback.
+ *
+ * Asynchronously invokes the <link linkend="gdbus-method-org-freedesktop-login1-Session.SetType">SetType()</link> D-Bus method on @proxy.
+ * When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
+ * You can then call logind_session_call_set_type_finish() to get the result of the operation.
+ *
+ * See logind_session_call_set_type_sync() for the synchronous, blocking version of this method.
+ */
+void
+logind_session_call_set_type (
+    LogindSession *proxy,
+    const gchar *arg_type,
+    GCancellable *cancellable,
+    GAsyncReadyCallback callback,
+    gpointer user_data)
+{
+  g_dbus_proxy_call (G_DBUS_PROXY (proxy),
+    "SetType",
+    g_variant_new ("(s)",
+                   arg_type),
+    G_DBUS_CALL_FLAGS_NONE,
+    -1,
+    cancellable,
+    callback,
+    user_data);
+}
+
+/**
+ * logind_session_call_set_type_finish:
+ * @proxy: A #LogindSessionProxy.
+ * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to logind_session_call_set_type().
+ * @error: Return location for error or %NULL.
+ *
+ * Finishes an operation started with logind_session_call_set_type().
+ *
+ * Returns: (skip): %TRUE if the call succeeded, %FALSE if @error is set.
+ */
+gboolean
+logind_session_call_set_type_finish (
+    LogindSession *proxy,
+    GAsyncResult *res,
+    GError **error)
+{
+  GVariant *_ret;
+  _ret = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
+  if (_ret == NULL)
+    goto _out;
+  g_variant_get (_ret,
+                 "()");
+  g_variant_unref (_ret);
+_out:
+  return _ret != NULL;
+}
+
+/**
+ * logind_session_call_set_type_sync:
+ * @proxy: A #LogindSessionProxy.
+ * @arg_type: Argument to pass with the method invocation.
+ * @cancellable: (nullable): A #GCancellable or %NULL.
+ * @error: Return location for error or %NULL.
+ *
+ * Synchronously invokes the <link linkend="gdbus-method-org-freedesktop-login1-Session.SetType">SetType()</link> D-Bus method on @proxy. The calling thread is blocked until a reply is received.
+ *
+ * See logind_session_call_set_type() for the asynchronous version of this method.
+ *
+ * Returns: (skip): %TRUE if the call succeeded, %FALSE if @error is set.
+ */
+gboolean
+logind_session_call_set_type_sync (
+    LogindSession *proxy,
+    const gchar *arg_type,
+    GCancellable *cancellable,
+    GError **error)
+{
+  GVariant *_ret;
+  _ret = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
+    "SetType",
+    g_variant_new ("(s)",
+                   arg_type),
+    G_DBUS_CALL_FLAGS_NONE,
+    -1,
+    cancellable,
+    error);
+  if (_ret == NULL)
+    goto _out;
+  g_variant_get (_ret,
+                 "()");
+  g_variant_unref (_ret);
+_out:
+  return _ret != NULL;
+}
+
+/**
+ * logind_session_call_set_display:
+ * @proxy: A #LogindSessionProxy.
+ * @arg_display: Argument to pass with the method invocation.
+ * @cancellable: (nullable): A #GCancellable or %NULL.
+ * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL.
+ * @user_data: User data to pass to @callback.
+ *
+ * Asynchronously invokes the <link linkend="gdbus-method-org-freedesktop-login1-Session.SetDisplay">SetDisplay()</link> D-Bus method on @proxy.
+ * When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
+ * You can then call logind_session_call_set_display_finish() to get the result of the operation.
+ *
+ * See logind_session_call_set_display_sync() for the synchronous, blocking version of this method.
+ */
+void
+logind_session_call_set_display (
+    LogindSession *proxy,
+    const gchar *arg_display,
+    GCancellable *cancellable,
+    GAsyncReadyCallback callback,
+    gpointer user_data)
+{
+  g_dbus_proxy_call (G_DBUS_PROXY (proxy),
+    "SetDisplay",
+    g_variant_new ("(s)",
+                   arg_display),
+    G_DBUS_CALL_FLAGS_NONE,
+    -1,
+    cancellable,
+    callback,
+    user_data);
+}
+
+/**
+ * logind_session_call_set_display_finish:
+ * @proxy: A #LogindSessionProxy.
+ * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to logind_session_call_set_display().
+ * @error: Return location for error or %NULL.
+ *
+ * Finishes an operation started with logind_session_call_set_display().
+ *
+ * Returns: (skip): %TRUE if the call succeeded, %FALSE if @error is set.
+ */
+gboolean
+logind_session_call_set_display_finish (
+    LogindSession *proxy,
+    GAsyncResult *res,
+    GError **error)
+{
+  GVariant *_ret;
+  _ret = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
+  if (_ret == NULL)
+    goto _out;
+  g_variant_get (_ret,
+                 "()");
+  g_variant_unref (_ret);
+_out:
+  return _ret != NULL;
+}
+
+/**
+ * logind_session_call_set_display_sync:
+ * @proxy: A #LogindSessionProxy.
+ * @arg_display: Argument to pass with the method invocation.
+ * @cancellable: (nullable): A #GCancellable or %NULL.
+ * @error: Return location for error or %NULL.
+ *
+ * Synchronously invokes the <link linkend="gdbus-method-org-freedesktop-login1-Session.SetDisplay">SetDisplay()</link> D-Bus method on @proxy. The calling thread is blocked until a reply is received.
+ *
+ * See logind_session_call_set_display() for the asynchronous version of this method.
+ *
+ * Returns: (skip): %TRUE if the call succeeded, %FALSE if @error is set.
+ */
+gboolean
+logind_session_call_set_display_sync (
+    LogindSession *proxy,
+    const gchar *arg_display,
+    GCancellable *cancellable,
+    GError **error)
+{
+  GVariant *_ret;
+  _ret = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
+    "SetDisplay",
+    g_variant_new ("(s)",
+                   arg_display),
+    G_DBUS_CALL_FLAGS_NONE,
+    -1,
+    cancellable,
+    error);
+  if (_ret == NULL)
+    goto _out;
+  g_variant_get (_ret,
+                 "()");
+  g_variant_unref (_ret);
+_out:
+  return _ret != NULL;
+}
+
 /**
  * logind_session_call_take_device:
  * @proxy: A #LogindSessionProxy.
- * @arg_unnamed_arg0: Argument to pass with the method invocation.
- * @arg_unnamed_arg1: Argument to pass with the method invocation.
+ * @arg_major: Argument to pass with the method invocation.
+ * @arg_minor: Argument to pass with the method invocation.
  * @cancellable: (nullable): A #GCancellable or %NULL.
  * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL.
  * @user_data: User data to pass to @callback.
  *
  * Asynchronously invokes the <link linkend="gdbus-method-org-freedesktop-login1-Session.TakeDevice">TakeDevice()</link> D-Bus method on @proxy.
- * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
+ * When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
  * You can then call logind_session_call_take_device_finish() to get the result of the operation.
  *
  * See logind_session_call_take_device_sync() for the synchronous, blocking version of this method.
@@ -4011,8 +4397,8 @@ _out:
 void
 logind_session_call_take_device (
     LogindSession *proxy,
-    guint arg_unnamed_arg0,
-    guint arg_unnamed_arg1,
+    guint arg_major,
+    guint arg_minor,
     GCancellable *cancellable,
     GAsyncReadyCallback callback,
     gpointer user_data)
@@ -4020,8 +4406,8 @@ logind_session_call_take_device (
   g_dbus_proxy_call (G_DBUS_PROXY (proxy),
     "TakeDevice",
     g_variant_new ("(uu)",
-                   arg_unnamed_arg0,
-                   arg_unnamed_arg1),
+                   arg_major,
+                   arg_minor),
     G_DBUS_CALL_FLAGS_NONE,
     -1,
     cancellable,
@@ -4032,20 +4418,20 @@ logind_session_call_take_device (
 /**
  * logind_session_call_take_device_finish:
  * @proxy: A #LogindSessionProxy.
- * @out_unnamed_arg2: (out): Return location for return parameter or %NULL to ignore.
- * @out_unnamed_arg3: (out): Return location for return parameter or %NULL to ignore.
+ * @out_fd: (out) (optional): Return location for return parameter or %NULL to ignore.
+ * @out_inactive: (out) (optional): Return location for return parameter or %NULL to ignore.
  * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to logind_session_call_take_device().
  * @error: Return location for error or %NULL.
  *
  * Finishes an operation started with logind_session_call_take_device().
  *
- * Returns: (skip): %TRUE if the call succeded, %FALSE if @error is set.
+ * Returns: (skip): %TRUE if the call succeeded, %FALSE if @error is set.
  */
 gboolean
 logind_session_call_take_device_finish (
     LogindSession *proxy,
-    GVariant **out_unnamed_arg2,
-    gboolean *out_unnamed_arg3,
+    GVariant **out_fd,
+    gboolean *out_inactive,
     GAsyncResult *res,
     GError **error)
 {
@@ -4055,8 +4441,8 @@ logind_session_call_take_device_finish (
     goto _out;
   g_variant_get (_ret,
                  "(@hb)",
-                 out_unnamed_arg2,
-                 out_unnamed_arg3);
+                 out_fd,
+                 out_inactive);
   g_variant_unref (_ret);
 _out:
   return _ret != NULL;
@@ -4065,10 +4451,10 @@ _out:
 /**
  * logind_session_call_take_device_sync:
  * @proxy: A #LogindSessionProxy.
- * @arg_unnamed_arg0: Argument to pass with the method invocation.
- * @arg_unnamed_arg1: Argument to pass with the method invocation.
- * @out_unnamed_arg2: (out): Return location for return parameter or %NULL to ignore.
- * @out_unnamed_arg3: (out): Return location for return parameter or %NULL to ignore.
+ * @arg_major: Argument to pass with the method invocation.
+ * @arg_minor: Argument to pass with the method invocation.
+ * @out_fd: (out) (optional): Return location for return parameter or %NULL to ignore.
+ * @out_inactive: (out) (optional): Return location for return parameter or %NULL to ignore.
  * @cancellable: (nullable): A #GCancellable or %NULL.
  * @error: Return location for error or %NULL.
  *
@@ -4076,15 +4462,15 @@ _out:
  *
  * See logind_session_call_take_device() for the asynchronous version of this method.
  *
- * Returns: (skip): %TRUE if the call succeded, %FALSE if @error is set.
+ * Returns: (skip): %TRUE if the call succeeded, %FALSE if @error is set.
  */
 gboolean
 logind_session_call_take_device_sync (
     LogindSession *proxy,
-    guint arg_unnamed_arg0,
-    guint arg_unnamed_arg1,
-    GVariant **out_unnamed_arg2,
-    gboolean *out_unnamed_arg3,
+    guint arg_major,
+    guint arg_minor,
+    GVariant **out_fd,
+    gboolean *out_inactive,
     GCancellable *cancellable,
     GError **error)
 {
@@ -4092,8 +4478,8 @@ logind_session_call_take_device_sync (
   _ret = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
     "TakeDevice",
     g_variant_new ("(uu)",
-                   arg_unnamed_arg0,
-                   arg_unnamed_arg1),
+                   arg_major,
+                   arg_minor),
     G_DBUS_CALL_FLAGS_NONE,
     -1,
     cancellable,
@@ -4102,8 +4488,8 @@ logind_session_call_take_device_sync (
     goto _out;
   g_variant_get (_ret,
                  "(@hb)",
-                 out_unnamed_arg2,
-                 out_unnamed_arg3);
+                 out_fd,
+                 out_inactive);
   g_variant_unref (_ret);
 _out:
   return _ret != NULL;
@@ -4112,14 +4498,14 @@ _out:
 /**
  * logind_session_call_release_device:
  * @proxy: A #LogindSessionProxy.
- * @arg_unnamed_arg0: Argument to pass with the method invocation.
- * @arg_unnamed_arg1: Argument to pass with the method invocation.
+ * @arg_major: Argument to pass with the method invocation.
+ * @arg_minor: Argument to pass with the method invocation.
  * @cancellable: (nullable): A #GCancellable or %NULL.
  * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL.
  * @user_data: User data to pass to @callback.
  *
  * Asynchronously invokes the <link linkend="gdbus-method-org-freedesktop-login1-Session.ReleaseDevice">ReleaseDevice()</link> D-Bus method on @proxy.
- * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
+ * When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
  * You can then call logind_session_call_release_device_finish() to get the result of the operation.
  *
  * See logind_session_call_release_device_sync() for the synchronous, blocking version of this method.
@@ -4127,8 +4513,8 @@ _out:
 void
 logind_session_call_release_device (
     LogindSession *proxy,
-    guint arg_unnamed_arg0,
-    guint arg_unnamed_arg1,
+    guint arg_major,
+    guint arg_minor,
     GCancellable *cancellable,
     GAsyncReadyCallback callback,
     gpointer user_data)
@@ -4136,8 +4522,8 @@ logind_session_call_release_device (
   g_dbus_proxy_call (G_DBUS_PROXY (proxy),
     "ReleaseDevice",
     g_variant_new ("(uu)",
-                   arg_unnamed_arg0,
-                   arg_unnamed_arg1),
+                   arg_major,
+                   arg_minor),
     G_DBUS_CALL_FLAGS_NONE,
     -1,
     cancellable,
@@ -4153,7 +4539,7 @@ logind_session_call_release_device (
  *
  * Finishes an operation started with logind_session_call_release_device().
  *
- * Returns: (skip): %TRUE if the call succeded, %FALSE if @error is set.
+ * Returns: (skip): %TRUE if the call succeeded, %FALSE if @error is set.
  */
 gboolean
 logind_session_call_release_device_finish (
@@ -4175,8 +4561,8 @@ _out:
 /**
  * logind_session_call_release_device_sync:
  * @proxy: A #LogindSessionProxy.
- * @arg_unnamed_arg0: Argument to pass with the method invocation.
- * @arg_unnamed_arg1: Argument to pass with the method invocation.
+ * @arg_major: Argument to pass with the method invocation.
+ * @arg_minor: Argument to pass with the method invocation.
  * @cancellable: (nullable): A #GCancellable or %NULL.
  * @error: Return location for error or %NULL.
  *
@@ -4184,13 +4570,13 @@ _out:
  *
  * See logind_session_call_release_device() for the asynchronous version of this method.
  *
- * Returns: (skip): %TRUE if the call succeded, %FALSE if @error is set.
+ * Returns: (skip): %TRUE if the call succeeded, %FALSE if @error is set.
  */
 gboolean
 logind_session_call_release_device_sync (
     LogindSession *proxy,
-    guint arg_unnamed_arg0,
-    guint arg_unnamed_arg1,
+    guint arg_major,
+    guint arg_minor,
     GCancellable *cancellable,
     GError **error)
 {
@@ -4198,8 +4584,8 @@ logind_session_call_release_device_sync (
   _ret = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
     "ReleaseDevice",
     g_variant_new ("(uu)",
-                   arg_unnamed_arg0,
-                   arg_unnamed_arg1),
+                   arg_major,
+                   arg_minor),
     G_DBUS_CALL_FLAGS_NONE,
     -1,
     cancellable,
@@ -4216,14 +4602,14 @@ _out:
 /**
  * logind_session_call_pause_device_complete:
  * @proxy: A #LogindSessionProxy.
- * @arg_unnamed_arg0: Argument to pass with the method invocation.
- * @arg_unnamed_arg1: Argument to pass with the method invocation.
+ * @arg_major: Argument to pass with the method invocation.
+ * @arg_minor: Argument to pass with the method invocation.
  * @cancellable: (nullable): A #GCancellable or %NULL.
  * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL.
  * @user_data: User data to pass to @callback.
  *
  * Asynchronously invokes the <link linkend="gdbus-method-org-freedesktop-login1-Session.PauseDeviceComplete">PauseDeviceComplete()</link> D-Bus method on @proxy.
- * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
+ * When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
  * You can then call logind_session_call_pause_device_complete_finish() to get the result of the operation.
  *
  * See logind_session_call_pause_device_complete_sync() for the synchronous, blocking version of this method.
@@ -4231,8 +4617,8 @@ _out:
 void
 logind_session_call_pause_device_complete (
     LogindSession *proxy,
-    guint arg_unnamed_arg0,
-    guint arg_unnamed_arg1,
+    guint arg_major,
+    guint arg_minor,
     GCancellable *cancellable,
     GAsyncReadyCallback callback,
     gpointer user_data)
@@ -4240,8 +4626,8 @@ logind_session_call_pause_device_complete (
   g_dbus_proxy_call (G_DBUS_PROXY (proxy),
     "PauseDeviceComplete",
     g_variant_new ("(uu)",
-                   arg_unnamed_arg0,
-                   arg_unnamed_arg1),
+                   arg_major,
+                   arg_minor),
     G_DBUS_CALL_FLAGS_NONE,
     -1,
     cancellable,
@@ -4257,7 +4643,7 @@ logind_session_call_pause_device_complete (
  *
  * Finishes an operation started with logind_session_call_pause_device_complete().
  *
- * Returns: (skip): %TRUE if the call succeded, %FALSE if @error is set.
+ * Returns: (skip): %TRUE if the call succeeded, %FALSE if @error is set.
  */
 gboolean
 logind_session_call_pause_device_complete_finish (
@@ -4279,8 +4665,8 @@ _out:
 /**
  * logind_session_call_pause_device_complete_sync:
  * @proxy: A #LogindSessionProxy.
- * @arg_unnamed_arg0: Argument to pass with the method invocation.
- * @arg_unnamed_arg1: Argument to pass with the method invocation.
+ * @arg_major: Argument to pass with the method invocation.
+ * @arg_minor: Argument to pass with the method invocation.
  * @cancellable: (nullable): A #GCancellable or %NULL.
  * @error: Return location for error or %NULL.
  *
@@ -4288,13 +4674,13 @@ _out:
  *
  * See logind_session_call_pause_device_complete() for the asynchronous version of this method.
  *
- * Returns: (skip): %TRUE if the call succeded, %FALSE if @error is set.
+ * Returns: (skip): %TRUE if the call succeeded, %FALSE if @error is set.
  */
 gboolean
 logind_session_call_pause_device_complete_sync (
     LogindSession *proxy,
-    guint arg_unnamed_arg0,
-    guint arg_unnamed_arg1,
+    guint arg_major,
+    guint arg_minor,
     GCancellable *cancellable,
     GError **error)
 {
@@ -4302,8 +4688,118 @@ logind_session_call_pause_device_complete_sync (
   _ret = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
     "PauseDeviceComplete",
     g_variant_new ("(uu)",
-                   arg_unnamed_arg0,
-                   arg_unnamed_arg1),
+                   arg_major,
+                   arg_minor),
+    G_DBUS_CALL_FLAGS_NONE,
+    -1,
+    cancellable,
+    error);
+  if (_ret == NULL)
+    goto _out;
+  g_variant_get (_ret,
+                 "()");
+  g_variant_unref (_ret);
+_out:
+  return _ret != NULL;
+}
+
+/**
+ * logind_session_call_set_brightness:
+ * @proxy: A #LogindSessionProxy.
+ * @arg_subsystem: Argument to pass with the method invocation.
+ * @arg_name: Argument to pass with the method invocation.
+ * @arg_brightness: Argument to pass with the method invocation.
+ * @cancellable: (nullable): A #GCancellable or %NULL.
+ * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL.
+ * @user_data: User data to pass to @callback.
+ *
+ * Asynchronously invokes the <link linkend="gdbus-method-org-freedesktop-login1-Session.SetBrightness">SetBrightness()</link> D-Bus method on @proxy.
+ * When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
+ * You can then call logind_session_call_set_brightness_finish() to get the result of the operation.
+ *
+ * See logind_session_call_set_brightness_sync() for the synchronous, blocking version of this method.
+ */
+void
+logind_session_call_set_brightness (
+    LogindSession *proxy,
+    const gchar *arg_subsystem,
+    const gchar *arg_name,
+    guint arg_brightness,
+    GCancellable *cancellable,
+    GAsyncReadyCallback callback,
+    gpointer user_data)
+{
+  g_dbus_proxy_call (G_DBUS_PROXY (proxy),
+    "SetBrightness",
+    g_variant_new ("(ssu)",
+                   arg_subsystem,
+                   arg_name,
+                   arg_brightness),
+    G_DBUS_CALL_FLAGS_NONE,
+    -1,
+    cancellable,
+    callback,
+    user_data);
+}
+
+/**
+ * logind_session_call_set_brightness_finish:
+ * @proxy: A #LogindSessionProxy.
+ * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to logind_session_call_set_brightness().
+ * @error: Return location for error or %NULL.
+ *
+ * Finishes an operation started with logind_session_call_set_brightness().
+ *
+ * Returns: (skip): %TRUE if the call succeeded, %FALSE if @error is set.
+ */
+gboolean
+logind_session_call_set_brightness_finish (
+    LogindSession *proxy,
+    GAsyncResult *res,
+    GError **error)
+{
+  GVariant *_ret;
+  _ret = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
+  if (_ret == NULL)
+    goto _out;
+  g_variant_get (_ret,
+                 "()");
+  g_variant_unref (_ret);
+_out:
+  return _ret != NULL;
+}
+
+/**
+ * logind_session_call_set_brightness_sync:
+ * @proxy: A #LogindSessionProxy.
+ * @arg_subsystem: Argument to pass with the method invocation.
+ * @arg_name: Argument to pass with the method invocation.
+ * @arg_brightness: Argument to pass with the method invocation.
+ * @cancellable: (nullable): A #GCancellable or %NULL.
+ * @error: Return location for error or %NULL.
+ *
+ * Synchronously invokes the <link linkend="gdbus-method-org-freedesktop-login1-Session.SetBrightness">SetBrightness()</link> D-Bus method on @proxy. The calling thread is blocked until a reply is received.
+ *
+ * See logind_session_call_set_brightness() for the asynchronous version of this method.
+ *
+ * Returns: (skip): %TRUE if the call succeeded, %FALSE if @error is set.
+ */
+gboolean
+logind_session_call_set_brightness_sync (
+    LogindSession *proxy,
+    const gchar *arg_subsystem,
+    const gchar *arg_name,
+    guint arg_brightness,
+    GCancellable *cancellable,
+    GError **error)
+{
+  GVariant *_ret;
+  _ret = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
+    "SetBrightness",
+    g_variant_new ("(ssu)",
+                   arg_subsystem,
+                   arg_name,
+                   arg_brightness),
     G_DBUS_CALL_FLAGS_NONE,
     -1,
     cancellable,
@@ -4328,7 +4824,7 @@ _out:
  */
 void
 logind_session_complete_terminate (
-    LogindSession *object,
+    LogindSession *object G_GNUC_UNUSED,
     GDBusMethodInvocation *invocation)
 {
   g_dbus_method_invocation_return_value (invocation,
@@ -4346,7 +4842,7 @@ logind_session_complete_terminate (
  */
 void
 logind_session_complete_activate (
-    LogindSession *object,
+    LogindSession *object G_GNUC_UNUSED,
     GDBusMethodInvocation *invocation)
 {
   g_dbus_method_invocation_return_value (invocation,
@@ -4364,7 +4860,7 @@ logind_session_complete_activate (
  */
 void
 logind_session_complete_lock (
-    LogindSession *object,
+    LogindSession *object G_GNUC_UNUSED,
     GDBusMethodInvocation *invocation)
 {
   g_dbus_method_invocation_return_value (invocation,
@@ -4382,7 +4878,7 @@ logind_session_complete_lock (
  */
 void
 logind_session_complete_unlock (
-    LogindSession *object,
+    LogindSession *object G_GNUC_UNUSED,
     GDBusMethodInvocation *invocation)
 {
   g_dbus_method_invocation_return_value (invocation,
@@ -4400,7 +4896,7 @@ logind_session_complete_unlock (
  */
 void
 logind_session_complete_set_idle_hint (
-    LogindSession *object,
+    LogindSession *object G_GNUC_UNUSED,
     GDBusMethodInvocation *invocation)
 {
   g_dbus_method_invocation_return_value (invocation,
@@ -4418,7 +4914,7 @@ logind_session_complete_set_idle_hint (
  */
 void
 logind_session_complete_set_locked_hint (
-    LogindSession *object,
+    LogindSession *object G_GNUC_UNUSED,
     GDBusMethodInvocation *invocation)
 {
   g_dbus_method_invocation_return_value (invocation,
@@ -4436,7 +4932,7 @@ logind_session_complete_set_locked_hint (
  */
 void
 logind_session_complete_kill (
-    LogindSession *object,
+    LogindSession *object G_GNUC_UNUSED,
     GDBusMethodInvocation *invocation)
 {
   g_dbus_method_invocation_return_value (invocation,
@@ -4454,7 +4950,7 @@ logind_session_complete_kill (
  */
 void
 logind_session_complete_take_control (
-    LogindSession *object,
+    LogindSession *object G_GNUC_UNUSED,
     GDBusMethodInvocation *invocation)
 {
   g_dbus_method_invocation_return_value (invocation,
@@ -4472,7 +4968,43 @@ logind_session_complete_take_control (
  */
 void
 logind_session_complete_release_control (
-    LogindSession *object,
+    LogindSession *object G_GNUC_UNUSED,
+    GDBusMethodInvocation *invocation)
+{
+  g_dbus_method_invocation_return_value (invocation,
+    g_variant_new ("()"));
+}
+
+/**
+ * logind_session_complete_set_type:
+ * @object: A #LogindSession.
+ * @invocation: (transfer full): A #GDBusMethodInvocation.
+ *
+ * Helper function used in service implementations to finish handling invocations of the <link linkend="gdbus-method-org-freedesktop-login1-Session.SetType">SetType()</link> D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.
+ *
+ * This method will free @invocation, you cannot use it afterwards.
+ */
+void
+logind_session_complete_set_type (
+    LogindSession *object G_GNUC_UNUSED,
+    GDBusMethodInvocation *invocation)
+{
+  g_dbus_method_invocation_return_value (invocation,
+    g_variant_new ("()"));
+}
+
+/**
+ * logind_session_complete_set_display:
+ * @object: A #LogindSession.
+ * @invocation: (transfer full): A #GDBusMethodInvocation.
+ *
+ * Helper function used in service implementations to finish handling invocations of the <link linkend="gdbus-method-org-freedesktop-login1-Session.SetDisplay">SetDisplay()</link> D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.
+ *
+ * This method will free @invocation, you cannot use it afterwards.
+ */
+void
+logind_session_complete_set_display (
+    LogindSession *object G_GNUC_UNUSED,
     GDBusMethodInvocation *invocation)
 {
   g_dbus_method_invocation_return_value (invocation,
@@ -4483,8 +5015,8 @@ logind_session_complete_release_control (
  * logind_session_complete_take_device:
  * @object: A #LogindSession.
  * @invocation: (transfer full): A #GDBusMethodInvocation.
- * @unnamed_arg2: Parameter to return.
- * @unnamed_arg3: Parameter to return.
+ * @fd: Parameter to return.
+ * @inactive: Parameter to return.
  *
  * Helper function used in service implementations to finish handling invocations of the <link linkend="gdbus-method-org-freedesktop-login1-Session.TakeDevice">TakeDevice()</link> D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.
  *
@@ -4492,15 +5024,15 @@ logind_session_complete_release_control (
  */
 void
 logind_session_complete_take_device (
-    LogindSession *object,
+    LogindSession *object G_GNUC_UNUSED,
     GDBusMethodInvocation *invocation,
-    GVariant *unnamed_arg2,
-    gboolean unnamed_arg3)
+    GVariant *fd,
+    gboolean inactive)
 {
   g_dbus_method_invocation_return_value (invocation,
     g_variant_new ("(@hb)",
-                   unnamed_arg2,
-                   unnamed_arg3));
+                   fd,
+                   inactive));
 }
 
 /**
@@ -4514,7 +5046,7 @@ logind_session_complete_take_device (
  */
 void
 logind_session_complete_release_device (
-    LogindSession *object,
+    LogindSession *object G_GNUC_UNUSED,
     GDBusMethodInvocation *invocation)
 {
   g_dbus_method_invocation_return_value (invocation,
@@ -4532,7 +5064,25 @@ logind_session_complete_release_device (
  */
 void
 logind_session_complete_pause_device_complete (
-    LogindSession *object,
+    LogindSession *object G_GNUC_UNUSED,
+    GDBusMethodInvocation *invocation)
+{
+  g_dbus_method_invocation_return_value (invocation,
+    g_variant_new ("()"));
+}
+
+/**
+ * logind_session_complete_set_brightness:
+ * @object: A #LogindSession.
+ * @invocation: (transfer full): A #GDBusMethodInvocation.
+ *
+ * Helper function used in service implementations to finish handling invocations of the <link linkend="gdbus-method-org-freedesktop-login1-Session.SetBrightness">SetBrightness()</link> D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.
+ *
+ * This method will free @invocation, you cannot use it afterwards.
+ */
+void
+logind_session_complete_set_brightness (
+    LogindSession *object G_GNUC_UNUSED,
     GDBusMethodInvocation *invocation)
 {
   g_dbus_method_invocation_return_value (invocation,
@@ -4588,7 +5138,7 @@ logind_session_proxy_get_property (GObject      *object,
   const _ExtendedGDBusPropertyInfo *info;
   GVariant *variant;
   g_assert (prop_id != 0 && prop_id - 1 < 25);
-  info = _logind_session_property_info_pointers[prop_id - 1];
+  info = (const _ExtendedGDBusPropertyInfo *) _logind_session_property_info_pointers[prop_id - 1];
   variant = g_dbus_proxy_get_cached_property (G_DBUS_PROXY (object), info->parent_struct.name);
   if (info->use_gvariant)
     {
@@ -4635,7 +5185,7 @@ logind_session_proxy_set_property (GObject      *object,
   const _ExtendedGDBusPropertyInfo *info;
   GVariant *variant;
   g_assert (prop_id != 0 && prop_id - 1 < 25);
-  info = _logind_session_property_info_pointers[prop_id - 1];
+  info = (const _ExtendedGDBusPropertyInfo *) _logind_session_property_info_pointers[prop_id - 1];
   variant = g_dbus_gvalue_to_gvariant (value, G_VARIANT_TYPE (info->parent_struct.signature));
   g_dbus_proxy_call (G_DBUS_PROXY (object),
     "org.freedesktop.DBus.Properties.Set",
@@ -5163,7 +5713,7 @@ logind_session_proxy_iface_init (LogindSessionIface *iface)
  *
  * Asynchronously creates a proxy for the D-Bus interface <link linkend="gdbus-interface-org-freedesktop-login1-Session.top_of_page">org.freedesktop.login1.Session</link>. See g_dbus_proxy_new() for more details.
  *
- * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
+ * When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
  * You can then call logind_session_proxy_new_finish() to get the result of the operation.
  *
  * See logind_session_proxy_new_sync() for the synchronous, blocking version of this constructor.
@@ -5253,7 +5803,7 @@ logind_session_proxy_new_sync (
  *
  * Like logind_session_proxy_new() but takes a #GBusType instead of a #GDBusConnection.
  *
- * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
+ * When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
  * You can then call logind_session_proxy_new_for_bus_finish() to get the result of the operation.
  *
  * See logind_session_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.
@@ -5562,9 +6112,9 @@ logind_session_skeleton_dbus_interface_flush (GDBusInterfaceSkeleton *_skeleton)
 static void
 _logind_session_on_signal_pause_device (
     LogindSession *object,
-    guint arg_unnamed_arg0,
-    guint arg_unnamed_arg1,
-    const gchar *arg_unnamed_arg2)
+    guint arg_major,
+    guint arg_minor,
+    const gchar *arg_type)
 {
   LogindSessionSkeleton *skeleton = LOGIND_SESSION_SKELETON (object);
 
@@ -5573,9 +6123,9 @@ _logind_session_on_signal_pause_device (
   connections = g_dbus_interface_skeleton_get_connections (G_DBUS_INTERFACE_SKELETON (skeleton));
 
   signal_variant = g_variant_ref_sink (g_variant_new ("(uus)",
-                   arg_unnamed_arg0,
-                   arg_unnamed_arg1,
-                   arg_unnamed_arg2));
+                   arg_major,
+                   arg_minor,
+                   arg_type));
   for (l = connections; l != NULL; l = l->next)
     {
       GDBusConnection *connection = l->data;
@@ -5590,9 +6140,9 @@ _logind_session_on_signal_pause_device (
 static void
 _logind_session_on_signal_resume_device (
     LogindSession *object,
-    guint arg_unnamed_arg0,
-    guint arg_unnamed_arg1,
-    GVariant *arg_unnamed_arg2)
+    guint arg_major,
+    guint arg_minor,
+    GVariant *arg_fd)
 {
   LogindSessionSkeleton *skeleton = LOGIND_SESSION_SKELETON (object);
 
@@ -5601,9 +6151,9 @@ _logind_session_on_signal_resume_device (
   connections = g_dbus_interface_skeleton_get_connections (G_DBUS_INTERFACE_SKELETON (skeleton));
 
   signal_variant = g_variant_ref_sink (g_variant_new ("(uu@h)",
-                   arg_unnamed_arg0,
-                   arg_unnamed_arg1,
-                   arg_unnamed_arg2));
+                   arg_major,
+                   arg_minor,
+                   arg_fd));
   for (l = connections; l != NULL; l = l->next)
     {
       GDBusConnection *connection = l->data;
@@ -5810,14 +6360,17 @@ logind_session_skeleton_set_property (GObject      *object,
   const GValue *value,
   GParamSpec   *pspec)
 {
+  const _ExtendedGDBusPropertyInfo *info;
   LogindSessionSkeleton *skeleton = LOGIND_SESSION_SKELETON (object);
   g_assert (prop_id != 0 && prop_id - 1 < 25);
+  info = (const _ExtendedGDBusPropertyInfo *) _logind_session_property_info_pointers[prop_id - 1];
   g_mutex_lock (&skeleton->priv->lock);
   g_object_freeze_notify (object);
   if (!_g_value_equal (value, &skeleton->priv->properties[prop_id - 1]))
     {
-      if (g_dbus_interface_skeleton_get_connection (G_DBUS_INTERFACE_SKELETON (skeleton)) != NULL)
-        _logind_session_schedule_emit_changed (skeleton, _logind_session_property_info_pointers[prop_id - 1], prop_id, &skeleton->priv->properties[prop_id - 1]);
+      if (g_dbus_interface_skeleton_get_connection (G_DBUS_INTERFACE_SKELETON (skeleton)) != NULL &&
+          info->emits_changed_signal)
+        _logind_session_schedule_emit_changed (skeleton, info, prop_id, &skeleton->priv->properties[prop_id - 1]);
       g_value_copy (value, &skeleton->priv->properties[prop_id - 1]);
       g_object_notify_by_pspec (object, pspec);
     }
diff --git a/src/server/console/logind-session.h b/src/server/console/logind-session.h
index 1e4f5cbbcc..0aefd80fb1 100644
--- a/src/server/console/logind-session.h
+++ b/src/server/console/logind-session.h
@@ -1,8 +1,9 @@
 /*
- * Generated by gdbus-codegen 2.56.0. DO NOT EDIT.
+ * This file is generated by gdbus-codegen, do not modify it.
  *
  * The license of this code is the same as for the D-Bus interface description
- * it was derived from.
+ * it was derived from. Note that it links to GLib, so must comply with the
+ * LGPL linking clauses.
  */
 
 #ifndef __LOGIND_SESSION_H__
@@ -38,8 +39,8 @@ struct _LogindSessionIface
   gboolean (*handle_kill) (
     LogindSession *object,
     GDBusMethodInvocation *invocation,
-    const gchar *arg_unnamed_arg0,
-    gint arg_unnamed_arg1);
+    const gchar *arg_who,
+    gint arg_signal_number);
 
   gboolean (*handle_lock) (
     LogindSession *object,
@@ -48,8 +49,8 @@ struct _LogindSessionIface
   gboolean (*handle_pause_device_complete) (
     LogindSession *object,
     GDBusMethodInvocation *invocation,
-    guint arg_unnamed_arg0,
-    guint arg_unnamed_arg1);
+    guint arg_major,
+    guint arg_minor);
 
   gboolean (*handle_release_control) (
     LogindSession *object,
@@ -58,29 +59,46 @@ struct _LogindSessionIface
   gboolean (*handle_release_device) (
     LogindSession *object,
     GDBusMethodInvocation *invocation,
-    guint arg_unnamed_arg0,
-    guint arg_unnamed_arg1);
+    guint arg_major,
+    guint arg_minor);
+
+  gboolean (*handle_set_brightness) (
+    LogindSession *object,
+    GDBusMethodInvocation *invocation,
+    const gchar *arg_subsystem,
+    const gchar *arg_name,
+    guint arg_brightness);
+
+  gboolean (*handle_set_display) (
+    LogindSession *object,
+    GDBusMethodInvocation *invocation,
+    const gchar *arg_display);
 
   gboolean (*handle_set_idle_hint) (
     LogindSession *object,
     GDBusMethodInvocation *invocation,
-    gboolean arg_unnamed_arg0);
+    gboolean arg_idle);
 
   gboolean (*handle_set_locked_hint) (
     LogindSession *object,
     GDBusMethodInvocation *invocation,
-    gboolean arg_unnamed_arg0);
+    gboolean arg_locked);
+
+  gboolean (*handle_set_type) (
+    LogindSession *object,
+    GDBusMethodInvocation *invocation,
+    const gchar *arg_type);
 
   gboolean (*handle_take_control) (
     LogindSession *object,
     GDBusMethodInvocation *invocation,
-    gboolean arg_unnamed_arg0);
+    gboolean arg_force);
 
   gboolean (*handle_take_device) (
     LogindSession *object,
     GDBusMethodInvocation *invocation,
-    guint arg_unnamed_arg0,
-    guint arg_unnamed_arg1);
+    guint arg_major,
+    guint arg_minor);
 
   gboolean (*handle_terminate) (
     LogindSession *object,
@@ -145,15 +163,15 @@ struct _LogindSessionIface
 
   void (*pause_device) (
     LogindSession *object,
-    guint arg_unnamed_arg0,
-    guint arg_unnamed_arg1,
-    const gchar *arg_unnamed_arg2);
+    guint arg_major,
+    guint arg_minor,
+    const gchar *arg_type);
 
   void (*resume_device) (
     LogindSession *object,
-    guint arg_unnamed_arg0,
-    guint arg_unnamed_arg1,
-    GVariant *arg_unnamed_arg2);
+    guint arg_major,
+    guint arg_minor,
+    GVariant *arg_fd);
 
   void (*unlock) (
     LogindSession *object);
@@ -203,11 +221,19 @@ void logind_session_complete_release_control (
     LogindSession *object,
     GDBusMethodInvocation *invocation);
 
+void logind_session_complete_set_type (
+    LogindSession *object,
+    GDBusMethodInvocation *invocation);
+
+void logind_session_complete_set_display (
+    LogindSession *object,
+    GDBusMethodInvocation *invocation);
+
 void logind_session_complete_take_device (
     LogindSession *object,
     GDBusMethodInvocation *invocation,
-    GVariant *unnamed_arg2,
-    gboolean unnamed_arg3);
+    GVariant *fd,
+    gboolean inactive);
 
 void logind_session_complete_release_device (
     LogindSession *object,
@@ -217,20 +243,24 @@ void logind_session_complete_pause_device_complete (
     LogindSession *object,
     GDBusMethodInvocation *invocation);
 
+void logind_session_complete_set_brightness (
+    LogindSession *object,
+    GDBusMethodInvocation *invocation);
+
 
 
 /* D-Bus signal emissions functions: */
 void logind_session_emit_pause_device (
     LogindSession *object,
-    guint arg_unnamed_arg0,
-    guint arg_unnamed_arg1,
-    const gchar *arg_unnamed_arg2);
+    guint arg_major,
+    guint arg_minor,
+    const gchar *arg_type);
 
 void logind_session_emit_resume_device (
     LogindSession *object,
-    guint arg_unnamed_arg0,
-    guint arg_unnamed_arg1,
-    GVariant *arg_unnamed_arg2);
+    guint arg_major,
+    guint arg_minor,
+    GVariant *arg_fd);
 
 void logind_session_emit_lock (
     LogindSession *object);
@@ -307,7 +337,7 @@ gboolean logind_session_call_unlock_sync (
 
 void logind_session_call_set_idle_hint (
     LogindSession *proxy,
-    gboolean arg_unnamed_arg0,
+    gboolean arg_idle,
     GCancellable *cancellable,
     GAsyncReadyCallback callback,
     gpointer user_data);
@@ -319,13 +349,13 @@ gboolean logind_session_call_set_idle_hint_finish (
 
 gboolean logind_session_call_set_idle_hint_sync (
     LogindSession *proxy,
-    gboolean arg_unnamed_arg0,
+    gboolean arg_idle,
     GCancellable *cancellable,
     GError **error);
 
 void logind_session_call_set_locked_hint (
     LogindSession *proxy,
-    gboolean arg_unnamed_arg0,
+    gboolean arg_locked,
     GCancellable *cancellable,
     GAsyncReadyCallback callback,
     gpointer user_data);
@@ -337,14 +367,14 @@ gboolean logind_session_call_set_locked_hint_finish (
 
 gboolean logind_session_call_set_locked_hint_sync (
     LogindSession *proxy,
-    gboolean arg_unnamed_arg0,
+    gboolean arg_locked,
     GCancellable *cancellable,
     GError **error);
 
 void logind_session_call_kill (
     LogindSession *proxy,
-    const gchar *arg_unnamed_arg0,
-    gint arg_unnamed_arg1,
+    const gchar *arg_who,
+    gint arg_signal_number,
     GCancellable *cancellable,
     GAsyncReadyCallback callback,
     gpointer user_data);
@@ -356,14 +386,14 @@ gboolean logind_session_call_kill_finish (
 
 gboolean logind_session_call_kill_sync (
     LogindSession *proxy,
-    const gchar *arg_unnamed_arg0,
-    gint arg_unnamed_arg1,
+    const gchar *arg_who,
+    gint arg_signal_number,
     GCancellable *cancellable,
     GError **error);
 
 void logind_session_call_take_control (
     LogindSession *proxy,
-    gboolean arg_unnamed_arg0,
+    gboolean arg_force,
     GCancellable *cancellable,
     GAsyncReadyCallback callback,
     gpointer user_data);
@@ -375,7 +405,7 @@ gboolean logind_session_call_take_control_finish (
 
 gboolean logind_session_call_take_control_sync (
     LogindSession *proxy,
-    gboolean arg_unnamed_arg0,
+    gboolean arg_force,
     GCancellable *cancellable,
     GError **error);
 
@@ -395,34 +425,70 @@ gboolean logind_session_call_release_control_sync (
     GCancellable *cancellable,
     GError **error);
 
+void logind_session_call_set_type (
+    LogindSession *proxy,
+    const gchar *arg_type,
+    GCancellable *cancellable,
+    GAsyncReadyCallback callback,
+    gpointer user_data);
+
+gboolean logind_session_call_set_type_finish (
+    LogindSession *proxy,
+    GAsyncResult *res,
+    GError **error);
+
+gboolean logind_session_call_set_type_sync (
+    LogindSession *proxy,
+    const gchar *arg_type,
+    GCancellable *cancellable,
+    GError **error);
+
+void logind_session_call_set_display (
+    LogindSession *proxy,
+    const gchar *arg_display,
+    GCancellable *cancellable,
+    GAsyncReadyCallback callback,
+    gpointer user_data);
+
+gboolean logind_session_call_set_display_finish (
+    LogindSession *proxy,
+    GAsyncResult *res,
+    GError **error);
+
+gboolean logind_session_call_set_display_sync (
+    LogindSession *proxy,
+    const gchar *arg_display,
+    GCancellable *cancellable,
+    GError **error);
+
 void logind_session_call_take_device (
     LogindSession *proxy,
-    guint arg_unnamed_arg0,
-    guint arg_unnamed_arg1,
+    guint arg_major,
+    guint arg_minor,
     GCancellable *cancellable,
     GAsyncReadyCallback callback,
     gpointer user_data);
 
 gboolean logind_session_call_take_device_finish (
     LogindSession *proxy,
-    GVariant **out_unnamed_arg2,
-    gboolean *out_unnamed_arg3,
+    GVariant **out_fd,
+    gboolean *out_inactive,
     GAsyncResult *res,
     GError **error);
 
 gboolean logind_session_call_take_device_sync (
     LogindSession *proxy,
-    guint arg_unnamed_arg0,
-    guint arg_unnamed_arg1,
-    GVariant **out_unnamed_arg2,
-    gboolean *out_unnamed_arg3,
+    guint arg_major,
+    guint arg_minor,
+    GVariant **out_fd,
+    gboolean *out_inactive,
     GCancellable *cancellable,
     GError **error);
 
 void logind_session_call_release_device (
     LogindSession *proxy,
-    guint arg_unnamed_arg0,
-    guint arg_unnamed_arg1,
+    guint arg_major,
+    guint arg_minor,
     GCancellable *cancellable,
     GAsyncReadyCallback callback,
     gpointer user_data);
@@ -434,15 +500,15 @@ gboolean logind_session_call_release_device_finish (
 
 gboolean logind_session_call_release_device_sync (
     LogindSession *proxy,
-    guint arg_unnamed_arg0,
-    guint arg_unnamed_arg1,
+    guint arg_major,
+    guint arg_minor,
     GCancellable *cancellable,
     GError **error);
 
 void logind_session_call_pause_device_complete (
     LogindSession *proxy,
-    guint arg_unnamed_arg0,
-    guint arg_unnamed_arg1,
+    guint arg_major,
+    guint arg_minor,
     GCancellable *cancellable,
     GAsyncReadyCallback callback,
     gpointer user_data);
@@ -454,8 +520,30 @@ gboolean logind_session_call_pause_device_complete_finish (
 
 gboolean logind_session_call_pause_device_complete_sync (
     LogindSession *proxy,
-    guint arg_unnamed_arg0,
-    guint arg_unnamed_arg1,
+    guint arg_major,
+    guint arg_minor,
+    GCancellable *cancellable,
+    GError **error);
+
+void logind_session_call_set_brightness (
+    LogindSession *proxy,
+    const gchar *arg_subsystem,
+    const gchar *arg_name,
+    guint arg_brightness,
+    GCancellable *cancellable,
+    GAsyncReadyCallback callback,
+    gpointer user_data);
+
+gboolean logind_session_call_set_brightness_finish (
+    LogindSession *proxy,
+    GAsyncResult *res,
+    GError **error);
+
+gboolean logind_session_call_set_brightness_sync (
+    LogindSession *proxy,
+    const gchar *arg_subsystem,
+    const gchar *arg_name,
+    guint arg_brightness,
     GCancellable *cancellable,
     GError **error);
 
-- 
2.39.1

