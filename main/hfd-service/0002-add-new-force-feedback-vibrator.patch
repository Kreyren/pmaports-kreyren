From 014aec311f853a00523fbdfa8bda179f150625ff Mon Sep 17 00:00:00 2001
From: Caleb Connolly <caleb@connolly.tech>
Date: Thu, 28 Jan 2021 23:06:34 +0000
Subject: [PATCH] vibrator: ff: add new Force Feedback vibrator

This vibrator type will search for an input device that supports the
FF_RUMBLE effect and use it.

Tested on the OnePlus 6T running Manjaro ARM.

Signed-off-by: Caleb Connolly <caleb@connolly.tech>
---
 src/CMakeLists.txt  |   1 +
 src/vibrator-ff.cpp | 153 ++++++++++++++++++++++++++++++++++++++++++++
 src/vibrator-ff.h   |  55 ++++++++++++++++
 src/vibrator.cpp    |  10 ++-
 4 files changed, 218 insertions(+), 1 deletion(-)
 create mode 100644 src/vibrator-ff.cpp
 create mode 100644 src/vibrator-ff.h

diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index a8c2bec..eedaac5 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -21,6 +21,7 @@ add_library(hfd-core STATIC
     leds-sysfs.cpp
 
     vibrator.cpp
+    vibrator-ff.cpp
     vibrator-sysfs.cpp
     vibrator-legacy.cpp
 
diff --git a/src/vibrator-ff.cpp b/src/vibrator-ff.cpp
new file mode 100644
index 0000000..3a52c37
--- /dev/null
+++ b/src/vibrator-ff.cpp
@@ -0,0 +1,153 @@
+/*
+ * Copyright 2020 UBports foundation
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation; version 3.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ * Author: Caleb Connolly <caleb@connolly.tech>
+ */
+
+#include "vibrator-ff.h"
+
+#include <fstream>
+#include <string>
+#include <iostream>
+#include <unistd.h>
+#include <vector>
+#include <linux/input.h>
+#include <sys/ioctl.h>
+#include <fcntl.h>
+
+/*
+ * This vibrator supports devices using the Kernel Force Feedback API.
+ * Mostly Mainline devices.
+ */
+namespace hfd {
+
+// For this implementation call the static getFirstFFDevice
+// And check that it didn't return the empty string.
+bool VibratorFF::usable() {
+	return VibratorFF::getFirstFFDevice().size() > 0;
+}
+
+// This takes a path to a device like '/dev/input/eventX'
+// And queries the device to see if it supports FF_RUMBLE
+bool inputDeviceSupportsFF(std::string devname) {
+	int ret;
+	unsigned char features[1 + FF_MAX/8/sizeof(unsigned char)];
+	int tempFd = open(devname.c_str(), O_RDWR);
+	int request = EVIOCGBIT(EV_FF, sizeof(features)*sizeof(unsigned char));
+	bool supported = false;
+
+	ret = ioctl(tempFd, request, &features);
+
+	if (testBit(FF_RUMBLE, features)) {
+		supported =  true;
+	} else {
+	}
+
+	ret = close(tempFd);
+	if (ret != 0) {
+		std::cerr << "FF: Failed to close " << tempFd << ": " << ret << std::endl;
+	}
+	return supported;
+}
+
+// Create play and/or stop input events to control
+// the rumble effect we uploaded in the constructor.
+void VibratorFF::configure(State state, int durationMs) {
+	int ret;
+	struct input_event play;
+	struct input_event stop;
+
+	if (state == State::On) {
+		std::cout << "rumbling with magnitude: " << effect.u.rumble.strong_magnitude << " for " << durationMs << "ms" << std::endl;
+
+		play.type = EV_FF;
+		play.code = effect.id;
+		play.value = 1;
+		write(fd, (const void*) &play, sizeof(play));
+
+		usleep(durationMs * 1000);
+	}
+	stop.type = EV_FF;
+	stop.code = effect.id;
+	stop.value = 0;
+	write(fd, (const void*) &stop, sizeof(stop));
+}
+
+// This finds the first device that supports force feedback
+// and assumes that it supports rumble, which it may not.
+// We should also query the device feature flags and be SURE
+std::string VibratorFF::getFirstFFDevice() {
+	Udev::Udev udev;
+	Udev::UdevEnumerate enumerate = udev.enumerate_new();
+
+	enumerate.add_match_subsystem("input");
+	enumerate.scan_devices();
+	std::vector<Udev::UdevDevice> devices = enumerate.enumerate_devices();
+	std::cout << "FF: Found " << devices.size() << " input devices" << std::endl;
+	for(int i = 0; i < devices.size(); i++) {
+		const auto properties = devices.at(i).get_properties();
+		if (properties.find("DEVNAME") != properties.end()) {
+			std::string temp = devices.at(i).get_properties().at("DEVNAME");
+			if (inputDeviceSupportsFF(temp)) {
+				std::cout << "Using " << temp << std::endl;
+				return temp;
+			}
+		}
+	}
+	return "";
+}
+
+// Create a force feedback vibrator
+VibratorFF::VibratorFF(): Vibrator() {
+	int ret;
+	// Find the first available input device that supports
+	// force feedback, we expect this to succeed as the caller
+	// should have called the static 'usable' method first.
+	devname = VibratorFF::getFirstFFDevice();
+
+	std::memset(&effect, 0, sizeof(effect));
+
+	// Create a rumble effect
+	effect.type = FF_RUMBLE;
+	effect.id = -1;
+	effect.u.rumble.strong_magnitude = 0x6000; // This should be adjustable
+	effect.u.rumble.weak_magnitude = 0;
+
+	fd = open(devname.c_str(), O_RDWR);
+	if (fd < 0) {
+		std::cerr << "Can't open force feedback device path: " << devname << std::endl;
+		return;
+	}
+
+	// Upload the effect to the device, this doesn't cause
+	// it to vibrate, just to store the effect in kernel memory.
+	ret = ioctl(fd, EVIOCSFF, &effect);
+	if (ret < 0) {
+		std::cerr << "Failed to upload rumble effect" << std::endl;
+		return;
+	}
+}
+
+VibratorFF::~VibratorFF() {
+	int ret;
+	if (fd > 0) {
+		// Unload the effect
+		ret = ioctl(fd, EVIOCRMFF, effect.id);
+		if (ret < 0)
+				std::cerr << "Failed to unload effect " << effect.id << std::endl;
+		close(fd);
+	}
+}
+}
diff --git a/src/vibrator-ff.h b/src/vibrator-ff.h
new file mode 100644
index 0000000..ee239db
--- /dev/null
+++ b/src/vibrator-ff.h
@@ -0,0 +1,55 @@
+/*
+ * Copyright 2020 UBports foundation
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation; version 3.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ * Author: Caleb Connolly <caleb@connolly.tech>
+ */
+
+#pragma once
+
+#include <linux/input.h>
+
+#include "vibrator.h"
+#include "udev/udev-cpp.h"
+
+// Borrowed from linuxconsole/utils/bitmaskros.h
+/* Number of bits for 1 unsigned char */
+#define nBitsPerUchar          (sizeof(unsigned char) * 8)
+/* Index=Offset of given bit in 1 unsigned char */
+#define bitOffsetInUchar(bit)  ((bit)%nBitsPerUchar)
+/* Index=Offset of the unsigned char associated to the bit
+ * at the given index=offset
+ */
+#define ucharIndexForBit(bit)  ((bit)/nBitsPerUchar)
+/* Test the bit with given index=offset in an unsigned char array */
+#define testBit(bit, array)    ((array[ucharIndexForBit(bit)] >> bitOffsetInUchar(bit)) & 1)
+
+namespace hfd {
+class VibratorFF : public Vibrator {
+
+public:
+    VibratorFF();
+    ~VibratorFF();
+
+    static bool usable();
+    static std::string getFirstFFDevice();
+protected:
+    void configure(State state, int durationMs) override;
+    
+private:
+    struct ff_effect effect;
+    std::string devname;
+    int fd;
+};
+}
diff --git a/src/vibrator.cpp b/src/vibrator.cpp
index 71fb6e5..7741221 100644
--- a/src/vibrator.cpp
+++ b/src/vibrator.cpp
@@ -17,6 +17,7 @@
  */
 
 #include "vibrator.h"
+#include "vibrator-ff.h"
 #include "vibrator-sysfs.h"
 #include "vibrator-legacy.h"
 #include "repeatThread.h"
@@ -48,6 +49,10 @@ std::shared_ptr<Vibrator> Vibrator::create()
         std::cout << "Using legacy vibrator" << std::endl;
         return std::make_shared<VibratorLegacy>();
     }
+    else if (VibratorFF::usable()) {
+        std::cout << "Using force feedback vibrator" << std::endl;
+        return std::make_shared<VibratorFF>();
+    }
 
     std::cout << "Using dummy vibrator" << std::endl;
     return std::make_shared<VibratorDummy>();
@@ -55,7 +60,10 @@ std::shared_ptr<Vibrator> Vibrator::create()
 
 std::shared_ptr<Vibrator> Vibrator::create(std::string type)
 {
-    if (type == "sysfs") {
+    if (type == "ff") {
+        std::cout << "Using force feedback vibrator" << std::endl;
+        return std::make_shared<VibratorFF>();  
+    } else if (type == "sysfs") {
         std::cout << "Using sysfs vibrator" << std::endl;
         return std::make_shared<VibratorSysfs>();  
     } else if (type == "legacy") {
