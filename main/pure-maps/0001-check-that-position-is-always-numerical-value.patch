From 6cfa16361b8866f6c94b720083ae57ca192ff086 Mon Sep 17 00:00:00 2001
From: Rinigus <rinigus.git@gmail.com>
Date: Sat, 6 Mar 2021 16:01:50 +0200
Subject: [PATCH] check that position is always numerical value

In addition, drop app.position and use gps.position directly
---
 qml/Compass.qml                  | 10 +++++-----
 qml/GeocodeItem.qml              |  8 ++++----
 qml/Map.qml                      | 17 ++++++++++-------
 qml/MapGestureArea.qml           |  2 +-
 qml/Navigator.qml                | 10 +++++-----
 qml/PlaceTypePage.qml            |  4 ++--
 qml/PositionMarker.qml           | 17 +++++++++--------
 qml/PositionSourceMapMatched.qml | 28 ++++++++++++++++++++++------
 qml/pure-maps.qml                |  3 +--
 9 files changed, 59 insertions(+), 40 deletions(-)

diff --git a/qml/Compass.qml b/qml/Compass.qml
index 4fc72f02..1b496729 100644
--- a/qml/Compass.qml
+++ b/qml/Compass.qml
@@ -39,15 +39,15 @@ Item {
     }
 
     Connections {
-        target: app
+        target: gps
         onPositionChanged: {
             if (!cmp.active) return;
-            if (_last_call && app.position.timestamp - _last_call < 1000*300 )
+            if (_last_call && gps.position.timestamp - _last_call < 1000*300 )
                 return;
-            _last_call = app.position.timestamp;
+            _last_call = gps.position.timestamp;
             py.call("poor.app.magfield.declination",
-                    [app.position.coordinate.latitude,
-                     app.position.coordinate.longitude],
+                    [gps.position.coordinate.latitude,
+                     gps.position.coordinate.longitude],
                     function (dec) {
                        if (Math.abs(cmp.declination-dec) > 0.1)
                            cmp.declination = dec;
diff --git a/qml/GeocodeItem.qml b/qml/GeocodeItem.qml
index 28a55572..a7f95ed5 100644
--- a/qml/GeocodeItem.qml
+++ b/qml/GeocodeItem.qml
@@ -325,8 +325,8 @@ Item {
         if (!query || query === geo._prevAutocompleteQuery) return;
         geo._autocompletePending = true;
         geo._prevAutocompleteQuery = query;
-        var x = app.position.coordinate.longitude || 0;
-        var y = app.position.coordinate.latitude || 0;
+        var x = gps.position.coordinate.longitude || 0;
+        var y = gps.position.coordinate.latitude || 0;
         py.call("poor.app.geocoder.autocomplete", [query, x, y], function(results) {
             if (!geo._autocompletePending) return;
 
@@ -352,8 +352,8 @@ Item {
         setSearchResults([]);
         _autocompletePending = false; // skip any ongoing autocomplete search
         py.call_sync("poor.app.history.add_place", [query]);
-        var x = app.position.coordinate.longitude || 0;
-        var y = app.position.coordinate.latitude || 0;
+        var x = gps.position.coordinate.longitude || 0;
+        var y = gps.position.coordinate.latitude || 0;
         geo.update();
         py.call("poor.app.geocoder.geocode", [query, x, y, null], function(results) {
             // skip, new search or autocomplete was started
diff --git a/qml/Map.qml b/qml/Map.qml
index 6af62130..96d84616 100644
--- a/qml/Map.qml
+++ b/qml/Map.qml
@@ -222,7 +222,7 @@ MapboxMap {
         // daytime bias timer
         interval: 1000*60
         repeat: true
-        running: app.conf.basemapAutoLight==="sunrise/sunset" && position.latitudeValid && position.longitudeValid //false
+        running: app.conf.basemapAutoLight==="sunrise/sunset" && gps.position.latitudeValid && gps.position.longitudeValid //false
 
         property bool lastLight: false
 
@@ -231,10 +231,10 @@ MapboxMap {
         onTriggered: update()
 
         function update(force) {
-            if (app.conf.basemapAutoLight!=="sunrise/sunset" || !position.latitudeValid || !position.longitudeValid)
+            if (app.conf.basemapAutoLight!=="sunrise/sunset" || !gps.position.latitudeValid || !gps.position.longitudeValid)
                 return;
-            py.call("poor.app.sun.day", [position.coordinate.latitude,
-                                         position.coordinate.longitude],
+            py.call("poor.app.sun.day", [gps.position.coordinate.latitude,
+                                         gps.position.coordinate.longitude],
                     function(light) {
                         if (force || lastLight !== light) {
                             py.call("poor.app.basemap.set_bias", [{'light': light ? 'day' : 'night'}]);
@@ -249,6 +249,10 @@ MapboxMap {
         onModeChanged: setMode()
         onPortraitChanged: map.updateMargins()
         onTransportModeChanged: setBias()
+    }
+
+    Connections {
+        target: gps
         onPositionChanged: {
             map.autoCenter && map.centerOnPosition();
         }
@@ -340,9 +344,8 @@ MapboxMap {
 
     function centerOnPosition() {
         // Center on the current position.
-        map.setCenter(
-                    app.position.coordinate.longitude,
-                    app.position.coordinate.latitude);
+        map.setCenter( gps.position.coordinate.longitude,
+                       gps.position.coordinate.latitude );
     }
 
     function configureLayers() {
diff --git a/qml/MapGestureArea.qml b/qml/MapGestureArea.qml
index a07fbb0f..c5b5642b 100644
--- a/qml/MapGestureArea.qml
+++ b/qml/MapGestureArea.qml
@@ -39,7 +39,7 @@ MapboxMapGestureArea {
         if (app.mode !== modes.navigate &&
                 app.mode !== modes.followMe &&
                 app.mode !== modes.navigatePost &&
-                area.coordinatesMatch(geocoordinate, app.position.coordinate)) {
+                area.coordinatesMatch(geocoordinate, gps.position.coordinate)) {
             map.autoCenter = !map.autoCenter;
             notification.flash(map.autoCenter ?
                                    app.tr("Auto-center on") :
diff --git a/qml/Navigator.qml b/qml/Navigator.qml
index b64dd540..675b1fe4 100644
--- a/qml/Navigator.qml
+++ b/qml/Navigator.qml
@@ -141,11 +141,11 @@ Item {
 
         function updatePosition() {
             if (destReached) return; // no more updates
-            navigatorBase.setPosition(app.position.coordinate,
+            navigatorBase.setPosition(gps.position.coordinate,
                                       gps.directionDeviceValid ? gps.directionDevice : gps.direction,
-                                      app.position.horizontalAccuracy,
-                                      app.position.horizontalAccuracyValid &&
-                                      app.position.latitudeValid && app.position.longitudeValid &&
+                                      gps.position.horizontalAccuracy,
+                                      gps.position.horizontalAccuracyValid &&
+                                      gps.position.latitudeValid && gps.position.longitudeValid &&
                                       gps.directionValid);
         }
     }
@@ -159,7 +159,7 @@ Item {
     }
 
     Connections {
-        target: app
+        target: gps
         onPositionChanged: navigatorBase.updatePosition()
     }
 
diff --git a/qml/PlaceTypePage.qml b/qml/PlaceTypePage.qml
index 6d4cd7c8..fb57bc57 100644
--- a/qml/PlaceTypePage.qml
+++ b/qml/PlaceTypePage.qml
@@ -123,8 +123,8 @@ DialogListPL {
         if (query === dialog.prevAutocompleteQuery) return;
         dialog.autocompletePending = true;
         dialog.prevAutocompleteQuery = query;
-        var x = app.position.coordinate.longitude || 0;
-        var y = app.position.coordinate.latitude || 0;
+        var x = gps.position.coordinate.longitude || 0;
+        var y = gps.position.coordinate.latitude || 0;
         py.call("poor.app.guide.autocomplete_type", [query], function(results) {
             dialog.autocompletePending = false;
             if (!dialog.active) return;
diff --git a/qml/PositionMarker.qml b/qml/PositionMarker.qml
index 9b975941..3c91f4d3 100644
--- a/qml/PositionMarker.qml
+++ b/qml/PositionMarker.qml
@@ -56,20 +56,21 @@ Item {
         onDirectionChanged: marker.updateDirection()
         onMetersPerPixelChanged: marker.updateUncertainty()
     }
+
     Connections {
-        target: app
+        target: gps
         onPositionChanged: {
             if (!positionShown || !marker._animatePosition) {
-                positionShown = QtPositioning.coordinate(app.position.coordinate.latitude, app.position.coordinate.longitude);
-                marker.position = QtPositioning.coordinate(app.position.coordinate.latitude, app.position.coordinate.longitude);
+                positionShown = QtPositioning.coordinate(gps.position.coordinate.latitude, gps.position.coordinate.longitude);
+                marker.position = QtPositioning.coordinate(gps.position.coordinate.latitude, gps.position.coordinate.longitude);
                 animate.to = marker.position;
             } else {
                 animate.complete();
                 marker.position = animate.to;
                 animate.from = QtPositioning.coordinate(marker.position.latitude, marker.position.longitude);
-                animate.to = QtPositioning.coordinate(app.position.coordinate.latitude, app.position.coordinate.longitude);
+                animate.to = QtPositioning.coordinate(gps.position.coordinate.latitude, gps.position.coordinate.longitude);
                 animate.start();
-                marker.position = QtPositioning.coordinate(app.position.coordinate.latitude, app.position.coordinate.longitude);
+                marker.position = QtPositioning.coordinate(gps.position.coordinate.latitude, gps.position.coordinate.longitude);
             }
         }
     }
@@ -124,7 +125,7 @@ Item {
     }
 
     function initLayers() {
-        map.addSourcePoint(marker.source, app.position.coordinate);
+        map.addSourcePoint(marker.source, gps.position.coordinate);
         map.addLayer(marker.layers.layerUncertainty,
                      {"type": "circle", "source": marker.source},
                      map.firstLabelLayer);
@@ -147,9 +148,9 @@ Item {
     }
 
     function updateUncertainty() {
-        if (app.position.horizontalAccuracyValid)
+        if (gps.position.horizontalAccuracyValid)
             map.setPaintProperty(marker.layers.layerUncertainty, "circle-radius",
-                                 app.position.horizontalAccuracy / map.metersPerPixel / map.pixelRatio);
+                                 gps.position.horizontalAccuracy / map.metersPerPixel / map.pixelRatio);
         else
             map.setPaintProperty(marker.layers.layerUncertainty, "circle-radius", 0);
     }
diff --git a/qml/PositionSourceMapMatched.qml b/qml/PositionSourceMapMatched.qml
index 50417c17..e5aa1bc8 100644
--- a/qml/PositionSourceMapMatched.qml
+++ b/qml/PositionSourceMapMatched.qml
@@ -40,7 +40,7 @@ Item {
     property alias mapMatchingAvailable: scoutbus.available
     property alias mapMatchingMode: scoutbus.mode
     property alias name: gps.name
-    property var   position: gps.position
+    property var   position
     property alias preferredPositioningMethods: gps.preferredPositioningMethods
     property alias sourceError: gps.sourceError
     property string streetName: ""
@@ -91,24 +91,40 @@ Item {
     PositionSource {
         id: gps
 
-        function positionUpdate(position) {
+        function positionUpdate(positionRaw) {
+            // Filter coordinates first to ensure that they
+            // are numeric values
+            var pos = {}
+            for (var i in positionRaw) {
+                if (!(positionRaw[i] instanceof Function))
+                    pos[i] = positionRaw[i]
+            }
+
+            if (pos.coordinate.latitude == null ||
+                    isNaN(pos.coordinate.latitude) ||
+                    pos.coordinate.longitude == null ||
+                    isNaN(pos.coordinate.longitude))
+                pos.coordinate = QtPositioning.coordinate(0, 0);
+
             if (scoutbus.available &&
                     scoutbus.mode &&
-                    position.latitudeValid && position.longitudeValid &&
-                    position.horizontalAccuracyValid) {
+                    pos.latitudeValid && pos.longitudeValid &&
+                    pos.horizontalAccuracyValid) {
                 if (master.timingStatsEnable && !master._timingShot) {
                     master._timingOverallCounter += 1;
                     master._timingShot = true;
                     master._timingLastCallStart = Date.now();
                 }
-                scoutbus.mapMatch(position);
+                scoutbus.mapMatch(pos);
             } else {
-                master.position = position;
+                master.position = pos;
                 if (scoutbus.mode && scoutbus.running)
                     scoutbus.stop();
             }
         }
 
+        Component.onCompleted: positionUpdate(position)
+
         onPositionChanged: if (testingCoordinate==null) positionUpdate(position)
 
         onActiveChanged: {
diff --git a/qml/pure-maps.qml b/qml/pure-maps.qml
index ebec76a8..45b104e5 100644
--- a/qml/pure-maps.qml
+++ b/qml/pure-maps.qml
@@ -73,7 +73,6 @@ ApplicationWindowPL {
     property var    pois: null
     property bool   poiActive: false
     property bool   portrait: screenHeight >= screenWidth
-    property var    position: gps.position
     property var    remorse: null
     property var    rootPage: null
     // used to track current search and other operations with kept states (temp pois, for example)
@@ -198,7 +197,7 @@ ApplicationWindowPL {
 
     function getPosition() {
         // Return the coordinates of the current position.
-        return [app.position.coordinate.longitude, app.position.coordinate.latitude];
+        return [gps.position.coordinate.longitude, gps.position.coordinate.latitude];
     }
 
     function hideMenu(menutext) {
